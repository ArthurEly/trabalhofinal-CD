// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2023 22:58:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controlevisor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlevisor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address_down;
reg [7:0] address_up;
reg B_done;
reg B_mostra_E;
reg [1:0] count;
reg [7:0] data_user;
reg down_on;
reg msg_done;
reg [7:0] read_reg;
reg S_mostraE;
reg up_on;
// wires                                               
wire [6:0] 0VISOR_REG;
wire [6:0] 0VISOR_REG12;
wire [6:0] 2VISOR_REG;
wire [6:0] 3VISOR_REG;

// assign statements (if any)                          
controlevisor i1 (
// port map - connection between master ports and signals/registers   
	.\0VISOR_REG (0VISOR_REG),
	.\0VISOR_REG12 (0VISOR_REG12),
	.\2VISOR_REG (2VISOR_REG),
	.\3VISOR_REG (3VISOR_REG),
	.address_down(address_down),
	.address_up(address_up),
	.B_done(B_done),
	.B_mostra_E(B_mostra_E),
	.count(count),
	.data_user(data_user),
	.down_on(down_on),
	.msg_done(msg_done),
	.read_reg(read_reg),
	.S_mostraE(S_mostraE),
	.up_on(up_on)
);
initial 
begin 
#1000000 $stop;
end 

// B_mostra_E
initial
begin
	B_mostra_E = 1'b0;
end 
initial 
begin 
#1000000 $stop;
end 
endmodule

