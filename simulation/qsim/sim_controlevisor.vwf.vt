// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/14/2023 00:24:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controlevisor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlevisor_vlg_sample_tst(
	address_down,
	address_up,
	B_done,
	B_mostra_E,
	count,
	data_user,
	down_on,
	msg_done,
	read_reg,
	S_mostraE,
	up_on,
	sampler_tx
);
input [7:0] address_down;
input [7:0] address_up;
input  B_done;
input  B_mostra_E;
input [1:0] count;
input [7:0] data_user;
input  down_on;
input  msg_done;
input [7:0] read_reg;
input  S_mostraE;
input  up_on;
output sampler_tx;

reg sample;
time current_time;
always @(address_down or address_up or B_done or B_mostra_E or count or data_user or down_on or msg_done or read_reg or S_mostraE or up_on)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controlevisor_vlg_check_tst (
	a1teste,
	g1teste,
	VISOR0_REG,
	VISOR1_REG,
	VISOR2_REG,
	VISOR3_REG,
	sampler_rx
);
input  a1teste;
input  g1teste;
input [6:0] VISOR0_REG;
input [6:0] VISOR1_REG;
input [6:0] VISOR2_REG;
input [6:0] VISOR3_REG;
input sampler_rx;

reg  a1teste_expected;
reg  g1teste_expected;
reg [6:0] VISOR0_REG_expected;
reg [6:0] VISOR1_REG_expected;
reg [6:0] VISOR2_REG_expected;
reg [6:0] VISOR3_REG_expected;

reg  a1teste_prev;
reg  g1teste_prev;
reg [6:0] VISOR0_REG_prev;
reg [6:0] VISOR1_REG_prev;
reg [6:0] VISOR2_REG_prev;
reg [6:0] VISOR3_REG_prev;

reg  a1teste_expected_prev;
reg  g1teste_expected_prev;
reg [6:0] VISOR0_REG_expected_prev;
reg [6:0] VISOR1_REG_expected_prev;
reg [6:0] VISOR2_REG_expected_prev;
reg [6:0] VISOR3_REG_expected_prev;

reg  last_a1teste_exp;
reg  last_g1teste_exp;
reg [6:0] last_VISOR0_REG_exp;
reg [6:0] last_VISOR1_REG_exp;
reg [6:0] last_VISOR2_REG_exp;
reg [6:0] last_VISOR3_REG_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	a1teste_prev = a1teste;
	g1teste_prev = g1teste;
	VISOR0_REG_prev = VISOR0_REG;
	VISOR1_REG_prev = VISOR1_REG;
	VISOR2_REG_prev = VISOR2_REG;
	VISOR3_REG_prev = VISOR3_REG;
end

// update expected /o prevs

always @(trigger)
begin
	a1teste_expected_prev = a1teste_expected;
	g1teste_expected_prev = g1teste_expected;
	VISOR0_REG_expected_prev = VISOR0_REG_expected;
	VISOR1_REG_expected_prev = VISOR1_REG_expected;
	VISOR2_REG_expected_prev = VISOR2_REG_expected;
	VISOR3_REG_expected_prev = VISOR3_REG_expected;
end



// expected a1teste
initial
begin
	a1teste_expected = 1'bX;
end 

// expected g1teste
initial
begin
	g1teste_expected = 1'bX;
end 
// expected VISOR3_REG[ 6 ]
initial
begin
	VISOR3_REG_expected[6] = 1'bX;
end 
// expected VISOR3_REG[ 5 ]
initial
begin
	VISOR3_REG_expected[5] = 1'bX;
end 
// expected VISOR3_REG[ 4 ]
initial
begin
	VISOR3_REG_expected[4] = 1'bX;
end 
// expected VISOR3_REG[ 3 ]
initial
begin
	VISOR3_REG_expected[3] = 1'bX;
end 
// expected VISOR3_REG[ 2 ]
initial
begin
	VISOR3_REG_expected[2] = 1'bX;
end 
// expected VISOR3_REG[ 1 ]
initial
begin
	VISOR3_REG_expected[1] = 1'bX;
end 
// expected VISOR3_REG[ 0 ]
initial
begin
	VISOR3_REG_expected[0] = 1'bX;
end 
// expected VISOR2_REG[ 6 ]
initial
begin
	VISOR2_REG_expected[6] = 1'bX;
end 
// expected VISOR2_REG[ 5 ]
initial
begin
	VISOR2_REG_expected[5] = 1'bX;
end 
// expected VISOR2_REG[ 4 ]
initial
begin
	VISOR2_REG_expected[4] = 1'bX;
end 
// expected VISOR2_REG[ 3 ]
initial
begin
	VISOR2_REG_expected[3] = 1'bX;
end 
// expected VISOR2_REG[ 2 ]
initial
begin
	VISOR2_REG_expected[2] = 1'bX;
end 
// expected VISOR2_REG[ 1 ]
initial
begin
	VISOR2_REG_expected[1] = 1'bX;
end 
// expected VISOR2_REG[ 0 ]
initial
begin
	VISOR2_REG_expected[0] = 1'bX;
end 
// expected VISOR1_REG[ 6 ]
initial
begin
	VISOR1_REG_expected[6] = 1'bX;
end 
// expected VISOR1_REG[ 5 ]
initial
begin
	VISOR1_REG_expected[5] = 1'bX;
end 
// expected VISOR1_REG[ 4 ]
initial
begin
	VISOR1_REG_expected[4] = 1'bX;
end 
// expected VISOR1_REG[ 3 ]
initial
begin
	VISOR1_REG_expected[3] = 1'bX;
end 
// expected VISOR1_REG[ 2 ]
initial
begin
	VISOR1_REG_expected[2] = 1'bX;
end 
// expected VISOR1_REG[ 1 ]
initial
begin
	VISOR1_REG_expected[1] = 1'bX;
end 
// expected VISOR1_REG[ 0 ]
initial
begin
	VISOR1_REG_expected[0] = 1'bX;
end 
// expected VISOR0_REG[ 6 ]
initial
begin
	VISOR0_REG_expected[6] = 1'bX;
end 
// expected VISOR0_REG[ 5 ]
initial
begin
	VISOR0_REG_expected[5] = 1'bX;
end 
// expected VISOR0_REG[ 4 ]
initial
begin
	VISOR0_REG_expected[4] = 1'bX;
end 
// expected VISOR0_REG[ 3 ]
initial
begin
	VISOR0_REG_expected[3] = 1'bX;
end 
// expected VISOR0_REG[ 2 ]
initial
begin
	VISOR0_REG_expected[2] = 1'bX;
end 
// expected VISOR0_REG[ 1 ]
initial
begin
	VISOR0_REG_expected[1] = 1'bX;
end 
// expected VISOR0_REG[ 0 ]
initial
begin
	VISOR0_REG_expected[0] = 1'bX;
end 
// generate trigger
always @(a1teste_expected or a1teste or g1teste_expected or g1teste or VISOR0_REG_expected or VISOR0_REG or VISOR1_REG_expected or VISOR1_REG or VISOR2_REG_expected or VISOR2_REG or VISOR3_REG_expected or VISOR3_REG)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a1teste = %b | expected g1teste = %b | expected VISOR0_REG = %b | expected VISOR1_REG = %b | expected VISOR2_REG = %b | expected VISOR3_REG = %b | ",a1teste_expected_prev,g1teste_expected_prev,VISOR0_REG_expected_prev,VISOR1_REG_expected_prev,VISOR2_REG_expected_prev,VISOR3_REG_expected_prev);
	$display("| real a1teste = %b | real g1teste = %b | real VISOR0_REG = %b | real VISOR1_REG = %b | real VISOR2_REG = %b | real VISOR3_REG = %b | ",a1teste_prev,g1teste_prev,VISOR0_REG_prev,VISOR1_REG_prev,VISOR2_REG_prev,VISOR3_REG_prev);
`endif
	if (
		( a1teste_expected_prev !== 1'bx ) && ( a1teste_prev !== a1teste_expected_prev )
		&& ((a1teste_expected_prev !== last_a1teste_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1teste_expected_prev);
		$display ("     Real value = %b", a1teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a1teste_exp = a1teste_expected_prev;
	end
	if (
		( g1teste_expected_prev !== 1'bx ) && ( g1teste_prev !== g1teste_expected_prev )
		&& ((g1teste_expected_prev !== last_g1teste_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g1teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g1teste_expected_prev);
		$display ("     Real value = %b", g1teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_g1teste_exp = g1teste_expected_prev;
	end
	if (
		( VISOR0_REG_expected_prev[0] !== 1'bx ) && ( VISOR0_REG_prev[0] !== VISOR0_REG_expected_prev[0] )
		&& ((VISOR0_REG_expected_prev[0] !== last_VISOR0_REG_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[0] = VISOR0_REG_expected_prev[0];
	end
	if (
		( VISOR0_REG_expected_prev[1] !== 1'bx ) && ( VISOR0_REG_prev[1] !== VISOR0_REG_expected_prev[1] )
		&& ((VISOR0_REG_expected_prev[1] !== last_VISOR0_REG_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[1] = VISOR0_REG_expected_prev[1];
	end
	if (
		( VISOR0_REG_expected_prev[2] !== 1'bx ) && ( VISOR0_REG_prev[2] !== VISOR0_REG_expected_prev[2] )
		&& ((VISOR0_REG_expected_prev[2] !== last_VISOR0_REG_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[2] = VISOR0_REG_expected_prev[2];
	end
	if (
		( VISOR0_REG_expected_prev[3] !== 1'bx ) && ( VISOR0_REG_prev[3] !== VISOR0_REG_expected_prev[3] )
		&& ((VISOR0_REG_expected_prev[3] !== last_VISOR0_REG_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[3] = VISOR0_REG_expected_prev[3];
	end
	if (
		( VISOR0_REG_expected_prev[4] !== 1'bx ) && ( VISOR0_REG_prev[4] !== VISOR0_REG_expected_prev[4] )
		&& ((VISOR0_REG_expected_prev[4] !== last_VISOR0_REG_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[4] = VISOR0_REG_expected_prev[4];
	end
	if (
		( VISOR0_REG_expected_prev[5] !== 1'bx ) && ( VISOR0_REG_prev[5] !== VISOR0_REG_expected_prev[5] )
		&& ((VISOR0_REG_expected_prev[5] !== last_VISOR0_REG_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[5] = VISOR0_REG_expected_prev[5];
	end
	if (
		( VISOR0_REG_expected_prev[6] !== 1'bx ) && ( VISOR0_REG_prev[6] !== VISOR0_REG_expected_prev[6] )
		&& ((VISOR0_REG_expected_prev[6] !== last_VISOR0_REG_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR0_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR0_REG_expected_prev);
		$display ("     Real value = %b", VISOR0_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VISOR0_REG_exp[6] = VISOR0_REG_expected_prev[6];
	end
	if (
		( VISOR1_REG_expected_prev[0] !== 1'bx ) && ( VISOR1_REG_prev[0] !== VISOR1_REG_expected_prev[0] )
		&& ((VISOR1_REG_expected_prev[0] !== last_VISOR1_REG_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[0] = VISOR1_REG_expected_prev[0];
	end
	if (
		( VISOR1_REG_expected_prev[1] !== 1'bx ) && ( VISOR1_REG_prev[1] !== VISOR1_REG_expected_prev[1] )
		&& ((VISOR1_REG_expected_prev[1] !== last_VISOR1_REG_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[1] = VISOR1_REG_expected_prev[1];
	end
	if (
		( VISOR1_REG_expected_prev[2] !== 1'bx ) && ( VISOR1_REG_prev[2] !== VISOR1_REG_expected_prev[2] )
		&& ((VISOR1_REG_expected_prev[2] !== last_VISOR1_REG_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[2] = VISOR1_REG_expected_prev[2];
	end
	if (
		( VISOR1_REG_expected_prev[3] !== 1'bx ) && ( VISOR1_REG_prev[3] !== VISOR1_REG_expected_prev[3] )
		&& ((VISOR1_REG_expected_prev[3] !== last_VISOR1_REG_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[3] = VISOR1_REG_expected_prev[3];
	end
	if (
		( VISOR1_REG_expected_prev[4] !== 1'bx ) && ( VISOR1_REG_prev[4] !== VISOR1_REG_expected_prev[4] )
		&& ((VISOR1_REG_expected_prev[4] !== last_VISOR1_REG_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[4] = VISOR1_REG_expected_prev[4];
	end
	if (
		( VISOR1_REG_expected_prev[5] !== 1'bx ) && ( VISOR1_REG_prev[5] !== VISOR1_REG_expected_prev[5] )
		&& ((VISOR1_REG_expected_prev[5] !== last_VISOR1_REG_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[5] = VISOR1_REG_expected_prev[5];
	end
	if (
		( VISOR1_REG_expected_prev[6] !== 1'bx ) && ( VISOR1_REG_prev[6] !== VISOR1_REG_expected_prev[6] )
		&& ((VISOR1_REG_expected_prev[6] !== last_VISOR1_REG_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR1_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR1_REG_expected_prev);
		$display ("     Real value = %b", VISOR1_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VISOR1_REG_exp[6] = VISOR1_REG_expected_prev[6];
	end
	if (
		( VISOR2_REG_expected_prev[0] !== 1'bx ) && ( VISOR2_REG_prev[0] !== VISOR2_REG_expected_prev[0] )
		&& ((VISOR2_REG_expected_prev[0] !== last_VISOR2_REG_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[0] = VISOR2_REG_expected_prev[0];
	end
	if (
		( VISOR2_REG_expected_prev[1] !== 1'bx ) && ( VISOR2_REG_prev[1] !== VISOR2_REG_expected_prev[1] )
		&& ((VISOR2_REG_expected_prev[1] !== last_VISOR2_REG_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[1] = VISOR2_REG_expected_prev[1];
	end
	if (
		( VISOR2_REG_expected_prev[2] !== 1'bx ) && ( VISOR2_REG_prev[2] !== VISOR2_REG_expected_prev[2] )
		&& ((VISOR2_REG_expected_prev[2] !== last_VISOR2_REG_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[2] = VISOR2_REG_expected_prev[2];
	end
	if (
		( VISOR2_REG_expected_prev[3] !== 1'bx ) && ( VISOR2_REG_prev[3] !== VISOR2_REG_expected_prev[3] )
		&& ((VISOR2_REG_expected_prev[3] !== last_VISOR2_REG_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[3] = VISOR2_REG_expected_prev[3];
	end
	if (
		( VISOR2_REG_expected_prev[4] !== 1'bx ) && ( VISOR2_REG_prev[4] !== VISOR2_REG_expected_prev[4] )
		&& ((VISOR2_REG_expected_prev[4] !== last_VISOR2_REG_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[4] = VISOR2_REG_expected_prev[4];
	end
	if (
		( VISOR2_REG_expected_prev[5] !== 1'bx ) && ( VISOR2_REG_prev[5] !== VISOR2_REG_expected_prev[5] )
		&& ((VISOR2_REG_expected_prev[5] !== last_VISOR2_REG_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[5] = VISOR2_REG_expected_prev[5];
	end
	if (
		( VISOR2_REG_expected_prev[6] !== 1'bx ) && ( VISOR2_REG_prev[6] !== VISOR2_REG_expected_prev[6] )
		&& ((VISOR2_REG_expected_prev[6] !== last_VISOR2_REG_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR2_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR2_REG_expected_prev);
		$display ("     Real value = %b", VISOR2_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VISOR2_REG_exp[6] = VISOR2_REG_expected_prev[6];
	end
	if (
		( VISOR3_REG_expected_prev[0] !== 1'bx ) && ( VISOR3_REG_prev[0] !== VISOR3_REG_expected_prev[0] )
		&& ((VISOR3_REG_expected_prev[0] !== last_VISOR3_REG_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[0] = VISOR3_REG_expected_prev[0];
	end
	if (
		( VISOR3_REG_expected_prev[1] !== 1'bx ) && ( VISOR3_REG_prev[1] !== VISOR3_REG_expected_prev[1] )
		&& ((VISOR3_REG_expected_prev[1] !== last_VISOR3_REG_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[1] = VISOR3_REG_expected_prev[1];
	end
	if (
		( VISOR3_REG_expected_prev[2] !== 1'bx ) && ( VISOR3_REG_prev[2] !== VISOR3_REG_expected_prev[2] )
		&& ((VISOR3_REG_expected_prev[2] !== last_VISOR3_REG_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[2] = VISOR3_REG_expected_prev[2];
	end
	if (
		( VISOR3_REG_expected_prev[3] !== 1'bx ) && ( VISOR3_REG_prev[3] !== VISOR3_REG_expected_prev[3] )
		&& ((VISOR3_REG_expected_prev[3] !== last_VISOR3_REG_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[3] = VISOR3_REG_expected_prev[3];
	end
	if (
		( VISOR3_REG_expected_prev[4] !== 1'bx ) && ( VISOR3_REG_prev[4] !== VISOR3_REG_expected_prev[4] )
		&& ((VISOR3_REG_expected_prev[4] !== last_VISOR3_REG_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[4] = VISOR3_REG_expected_prev[4];
	end
	if (
		( VISOR3_REG_expected_prev[5] !== 1'bx ) && ( VISOR3_REG_prev[5] !== VISOR3_REG_expected_prev[5] )
		&& ((VISOR3_REG_expected_prev[5] !== last_VISOR3_REG_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[5] = VISOR3_REG_expected_prev[5];
	end
	if (
		( VISOR3_REG_expected_prev[6] !== 1'bx ) && ( VISOR3_REG_prev[6] !== VISOR3_REG_expected_prev[6] )
		&& ((VISOR3_REG_expected_prev[6] !== last_VISOR3_REG_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VISOR3_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VISOR3_REG_expected_prev);
		$display ("     Real value = %b", VISOR3_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_VISOR3_REG_exp[6] = VISOR3_REG_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controlevisor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address_down;
reg [7:0] address_up;
reg B_done;
reg B_mostra_E;
reg [1:0] count;
reg [7:0] data_user;
reg down_on;
reg msg_done;
reg [7:0] read_reg;
reg S_mostraE;
reg up_on;
// wires                                               
wire a1teste;
wire g1teste;
wire [6:0] VISOR0_REG;
wire [6:0] VISOR1_REG;
wire [6:0] VISOR2_REG;
wire [6:0] VISOR3_REG;

wire sampler;                             

// assign statements (if any)                          
controlevisor i1 (
// port map - connection between master ports and signals/registers   
	.a1teste(a1teste),
	.address_down(address_down),
	.address_up(address_up),
	.B_done(B_done),
	.B_mostra_E(B_mostra_E),
	.count(count),
	.data_user(data_user),
	.down_on(down_on),
	.g1teste(g1teste),
	.msg_done(msg_done),
	.read_reg(read_reg),
	.S_mostraE(S_mostraE),
	.up_on(up_on),
	.VISOR0_REG(VISOR0_REG),
	.VISOR1_REG(VISOR1_REG),
	.VISOR2_REG(VISOR2_REG),
	.VISOR3_REG(VISOR3_REG)
);
// address_down[ 7 ]
initial
begin
	address_down[7] = 1'b0;
end 
// address_down[ 6 ]
initial
begin
	address_down[6] = 1'b0;
end 
// address_down[ 5 ]
initial
begin
	address_down[5] = 1'b0;
end 
// address_down[ 4 ]
initial
begin
	address_down[4] = 1'b0;
end 
// address_down[ 3 ]
initial
begin
	address_down[3] = 1'b0;
end 
// address_down[ 2 ]
initial
begin
	address_down[2] = 1'b0;
end 
// address_down[ 1 ]
initial
begin
	address_down[1] = 1'b0;
end 
// address_down[ 0 ]
initial
begin
	address_down[0] = 1'b0;
end 
// address_up[ 7 ]
initial
begin
	address_up[7] = 1'b0;
end 
// address_up[ 6 ]
initial
begin
	address_up[6] = 1'b0;
end 
// address_up[ 5 ]
initial
begin
	address_up[5] = 1'b0;
end 
// address_up[ 4 ]
initial
begin
	address_up[4] = 1'b0;
end 
// address_up[ 3 ]
initial
begin
	address_up[3] = 1'b0;
end 
// address_up[ 2 ]
initial
begin
	address_up[2] = 1'b0;
end 
// address_up[ 1 ]
initial
begin
	address_up[1] = 1'b0;
end 
// address_up[ 0 ]
initial
begin
	address_up[0] = 1'b0;
end 

// B_done
initial
begin
	B_done = 1'b0;
end 

// B_mostra_E
initial
begin
	B_mostra_E = 1'b0;
end 
// count[ 1 ]
initial
begin
	count[1] = 1'b0;
end 
// count[ 0 ]
initial
begin
	count[0] = 1'b0;
	count[0] = #30000 1'b1;
end 
// data_user[ 7 ]
initial
begin
	data_user[7] = 1'b0;
end 
// data_user[ 6 ]
initial
begin
	data_user[6] = 1'b0;
end 
// data_user[ 5 ]
initial
begin
	data_user[5] = 1'b0;
end 
// data_user[ 4 ]
initial
begin
	data_user[4] = 1'b0;
end 
// data_user[ 3 ]
initial
begin
	data_user[3] = 1'b0;
end 
// data_user[ 2 ]
initial
begin
	data_user[2] = 1'b0;
end 
// data_user[ 1 ]
initial
begin
	data_user[1] = 1'b0;
end 
// data_user[ 0 ]
initial
begin
	data_user[0] = 1'b0;
end 

// down_on
initial
begin
	down_on = 1'b0;
end 

// msg_done
initial
begin
	msg_done = 1'b0;
end 
// read_reg[ 7 ]
initial
begin
	read_reg[7] = 1'b0;
end 
// read_reg[ 6 ]
initial
begin
	read_reg[6] = 1'b0;
end 
// read_reg[ 5 ]
initial
begin
	read_reg[5] = 1'b0;
end 
// read_reg[ 4 ]
initial
begin
	read_reg[4] = 1'b0;
end 
// read_reg[ 3 ]
initial
begin
	read_reg[3] = 1'b0;
end 
// read_reg[ 2 ]
initial
begin
	read_reg[2] = 1'b0;
end 
// read_reg[ 1 ]
initial
begin
	read_reg[1] = 1'b0;
end 
// read_reg[ 0 ]
initial
begin
	read_reg[0] = 1'b0;
end 

// S_mostraE
initial
begin
	S_mostraE = 1'b0;
end 

// up_on
initial
begin
	up_on = 1'b0;
end 

controlevisor_vlg_sample_tst tb_sample (
	.address_down(address_down),
	.address_up(address_up),
	.B_done(B_done),
	.B_mostra_E(B_mostra_E),
	.count(count),
	.data_user(data_user),
	.down_on(down_on),
	.msg_done(msg_done),
	.read_reg(read_reg),
	.S_mostraE(S_mostraE),
	.up_on(up_on),
	.sampler_tx(sampler)
);

controlevisor_vlg_check_tst tb_out(
	.a1teste(a1teste),
	.g1teste(g1teste),
	.VISOR0_REG(VISOR0_REG),
	.VISOR1_REG(VISOR1_REG),
	.VISOR2_REG(VISOR2_REG),
	.VISOR3_REG(VISOR3_REG),
	.sampler_rx(sampler)
);
endmodule

