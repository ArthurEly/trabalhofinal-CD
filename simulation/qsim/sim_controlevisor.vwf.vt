// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/14/2023 14:51:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trabalhofinalfinal_
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trabalhofinalfinal__vlg_sample_tst(
	clock,
	confirma_DA,
	confirma_funcao,
	sw0,
	sw1,
	sw2,
	sw3,
	sw4,
	sw5,
	sw6,
	sw7,
	sw8,
	sw9,
	troca_funcao,
	sampler_tx
);
input  clock;
input  confirma_DA;
input  confirma_funcao;
input  sw0;
input  sw1;
input  sw2;
input  sw3;
input  sw4;
input  sw5;
input  sw6;
input  sw7;
input  sw8;
input  sw9;
input  troca_funcao;
output sampler_tx;

reg sample;
time current_time;
always @(clock or confirma_DA or confirma_funcao or sw0 or sw1 or sw2 or sw3 or sw4 or sw5 or sw6 or sw7 or sw8 or sw9 or troca_funcao)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trabalhofinalfinal__vlg_check_tst (
	a_load_regs,
	address_down_reg_out,
	address_up_reg_out,
	adress_on,
	d_0,
	d_1,
	d_2,
	d_3,
	data_out,
	data_reg_out,
	doneLed,
	estados_c,
	funcao,
	funcao_1,
	habilita_count,
	habilita_count2,
	led,
	led00,
	led01,
	led10,
	led11,
	q,
	sw_down,
	sw_up,
	sampler_rx
);
input  a_load_regs;
input [7:0] address_down_reg_out;
input [7:0] address_up_reg_out;
input  adress_on;
input [6:0] d_0;
input [6:0] d_1;
input [6:0] d_2;
input [6:0] d_3;
input [7:0] data_out;
input [7:0] data_reg_out;
input  doneLed;
input [1:0] estados_c;
input [1:0] funcao;
input  funcao_1;
input  habilita_count;
input  habilita_count2;
input  led;
input  led00;
input  led01;
input  led10;
input  led11;
input  q;
input [7:0] sw_down;
input [7:0] sw_up;
input sampler_rx;

reg  a_load_regs_expected;
reg [7:0] address_down_reg_out_expected;
reg [7:0] address_up_reg_out_expected;
reg  adress_on_expected;
reg [6:0] d_0_expected;
reg [6:0] d_1_expected;
reg [6:0] d_2_expected;
reg [6:0] d_3_expected;
reg [7:0] data_out_expected;
reg [7:0] data_reg_out_expected;
reg  doneLed_expected;
reg [1:0] estados_c_expected;
reg [1:0] funcao_expected;
reg  funcao_1_expected;
reg  habilita_count_expected;
reg  habilita_count2_expected;
reg  led_expected;
reg  led00_expected;
reg  led01_expected;
reg  led10_expected;
reg  led11_expected;
reg  q_expected;
reg [7:0] sw_down_expected;
reg [7:0] sw_up_expected;

reg  a_load_regs_prev;
reg [7:0] address_down_reg_out_prev;
reg [7:0] address_up_reg_out_prev;
reg  adress_on_prev;
reg [6:0] d_0_prev;
reg [6:0] d_1_prev;
reg [6:0] d_2_prev;
reg [6:0] d_3_prev;
reg [7:0] data_out_prev;
reg [7:0] data_reg_out_prev;
reg  doneLed_prev;
reg [1:0] estados_c_prev;
reg [1:0] funcao_prev;
reg  funcao_1_prev;
reg  habilita_count_prev;
reg  habilita_count2_prev;
reg  led_prev;
reg  led00_prev;
reg  led01_prev;
reg  led10_prev;
reg  led11_prev;
reg  q_prev;
reg [7:0] sw_down_prev;
reg [7:0] sw_up_prev;

reg  led00_expected_prev;
reg  led01_expected_prev;
reg  led10_expected_prev;
reg  led11_expected_prev;

reg  last_led00_exp;
reg  last_led01_exp;
reg  last_led10_exp;
reg  last_led11_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:24] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 24'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_load_regs_prev = a_load_regs;
	address_down_reg_out_prev = address_down_reg_out;
	address_up_reg_out_prev = address_up_reg_out;
	adress_on_prev = adress_on;
	d_0_prev = d_0;
	d_1_prev = d_1;
	d_2_prev = d_2;
	d_3_prev = d_3;
	data_out_prev = data_out;
	data_reg_out_prev = data_reg_out;
	doneLed_prev = doneLed;
	estados_c_prev = estados_c;
	funcao_prev = funcao;
	funcao_1_prev = funcao_1;
	habilita_count_prev = habilita_count;
	habilita_count2_prev = habilita_count2;
	led_prev = led;
	led00_prev = led00;
	led01_prev = led01;
	led10_prev = led10;
	led11_prev = led11;
	q_prev = q;
	sw_down_prev = sw_down;
	sw_up_prev = sw_up;
end

// update expected /o prevs

always @(trigger)
begin
	led00_expected_prev = led00_expected;
	led01_expected_prev = led01_expected;
	led10_expected_prev = led10_expected;
	led11_expected_prev = led11_expected;
end



// expected led00
initial
begin
	led00_expected = 1'bX;
end 

// expected led01
initial
begin
	led01_expected = 1'bX;
end 

// expected led10
initial
begin
	led10_expected = 1'bX;
end 

// expected led11
initial
begin
	led11_expected = 1'bX;
end 
// generate trigger
always @(a_load_regs_expected or a_load_regs or address_down_reg_out_expected or address_down_reg_out or address_up_reg_out_expected or address_up_reg_out or adress_on_expected or adress_on or d_0_expected or d_0 or d_1_expected or d_1 or d_2_expected or d_2 or d_3_expected or d_3 or data_out_expected or data_out or data_reg_out_expected or data_reg_out or doneLed_expected or doneLed or estados_c_expected or estados_c or funcao_expected or funcao or funcao_1_expected or funcao_1 or habilita_count_expected or habilita_count or habilita_count2_expected or habilita_count2 or led_expected or led or led00_expected or led00 or led01_expected or led01 or led10_expected or led10 or led11_expected or led11 or q_expected or q or sw_down_expected or sw_down or sw_up_expected or sw_up)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a_load_regs = %b | expected address_down_reg_out = %b | expected address_up_reg_out = %b | expected adress_on = %b | expected d_0 = %b | expected d_1 = %b | expected d_2 = %b | expected d_3 = %b | expected data_out = %b | expected data_reg_out = %b | expected doneLed = %b | expected estados_c = %b | expected funcao = %b | expected funcao_1 = %b | expected habilita_count = %b | expected habilita_count2 = %b | expected led = %b | expected led00 = %b | expected led01 = %b | expected led10 = %b | expected led11 = %b | expected q = %b | expected sw_down = %b | expected sw_up = %b | ",a_load_regs_expected_prev,address_down_reg_out_expected_prev,address_up_reg_out_expected_prev,adress_on_expected_prev,d_0_expected_prev,d_1_expected_prev,d_2_expected_prev,d_3_expected_prev,data_out_expected_prev,data_reg_out_expected_prev,doneLed_expected_prev,estados_c_expected_prev,funcao_expected_prev,funcao_1_expected_prev,habilita_count_expected_prev,habilita_count2_expected_prev,led_expected_prev,led00_expected_prev,led01_expected_prev,led10_expected_prev,led11_expected_prev,q_expected_prev,sw_down_expected_prev,sw_up_expected_prev);
	$display("| real a_load_regs = %b | real address_down_reg_out = %b | real address_up_reg_out = %b | real adress_on = %b | real d_0 = %b | real d_1 = %b | real d_2 = %b | real d_3 = %b | real data_out = %b | real data_reg_out = %b | real doneLed = %b | real estados_c = %b | real funcao = %b | real funcao_1 = %b | real habilita_count = %b | real habilita_count2 = %b | real led = %b | real led00 = %b | real led01 = %b | real led10 = %b | real led11 = %b | real q = %b | real sw_down = %b | real sw_up = %b | ",a_load_regs_prev,address_down_reg_out_prev,address_up_reg_out_prev,adress_on_prev,d_0_prev,d_1_prev,d_2_prev,d_3_prev,data_out_prev,data_reg_out_prev,doneLed_prev,estados_c_prev,funcao_prev,funcao_1_prev,habilita_count_prev,habilita_count2_prev,led_prev,led00_prev,led01_prev,led10_prev,led11_prev,q_prev,sw_down_prev,sw_up_prev);
`endif
	if (
		( led00_expected_prev !== 1'bx ) && ( led00_prev !== led00_expected_prev )
		&& ((led00_expected_prev !== last_led00_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led00 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led00_expected_prev);
		$display ("     Real value = %b", led00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_led00_exp = led00_expected_prev;
	end
	if (
		( led01_expected_prev !== 1'bx ) && ( led01_prev !== led01_expected_prev )
		&& ((led01_expected_prev !== last_led01_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led01 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led01_expected_prev);
		$display ("     Real value = %b", led01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_led01_exp = led01_expected_prev;
	end
	if (
		( led10_expected_prev !== 1'bx ) && ( led10_prev !== led10_expected_prev )
		&& ((led10_expected_prev !== last_led10_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led10_expected_prev);
		$display ("     Real value = %b", led10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_led10_exp = led10_expected_prev;
	end
	if (
		( led11_expected_prev !== 1'bx ) && ( led11_prev !== led11_expected_prev )
		&& ((led11_expected_prev !== last_led11_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led11_expected_prev);
		$display ("     Real value = %b", led11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_led11_exp = led11_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module trabalhofinalfinal__vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg confirma_DA;
reg confirma_funcao;
reg sw0;
reg sw1;
reg sw2;
reg sw3;
reg sw4;
reg sw5;
reg sw6;
reg sw7;
reg sw8;
reg sw9;
reg troca_funcao;
// wires                                               
wire a_load_regs;
wire [7:0] address_down_reg_out;
wire [7:0] address_up_reg_out;
wire adress_on;
wire [6:0] d_0;
wire [6:0] d_1;
wire [6:0] d_2;
wire [6:0] d_3;
wire [7:0] data_out;
wire [7:0] data_reg_out;
wire doneLed;
wire [1:0] estados_c;
wire [1:0] funcao;
wire funcao_1;
wire habilita_count;
wire habilita_count2;
wire led;
wire led00;
wire led01;
wire led10;
wire led11;
wire q;
wire [7:0] sw_down;
wire [7:0] sw_up;

wire sampler;                             

// assign statements (if any)                          
trabalhofinalfinal_ i1 (
// port map - connection between master ports and signals/registers   
	.a_load_regs(a_load_regs),
	.address_down_reg_out(address_down_reg_out),
	.address_up_reg_out(address_up_reg_out),
	.adress_on(adress_on),
	.clock(clock),
	.confirma_DA(confirma_DA),
	.confirma_funcao(confirma_funcao),
	.d_0(d_0),
	.d_1(d_1),
	.d_2(d_2),
	.d_3(d_3),
	.data_out(data_out),
	.data_reg_out(data_reg_out),
	.doneLed(doneLed),
	.estados_c(estados_c),
	.funcao(funcao),
	.funcao_1(funcao_1),
	.habilita_count(habilita_count),
	.habilita_count2(habilita_count2),
	.led(led),
	.led00(led00),
	.led01(led01),
	.led10(led10),
	.led11(led11),
	.q(q),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.sw_down(sw_down),
	.sw_up(sw_up),
	.troca_funcao(troca_funcao)
);

trabalhofinalfinal__vlg_sample_tst tb_sample (
	.clock(clock),
	.confirma_DA(confirma_DA),
	.confirma_funcao(confirma_funcao),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.troca_funcao(troca_funcao),
	.sampler_tx(sampler)
);

trabalhofinalfinal__vlg_check_tst tb_out(
	.a_load_regs(a_load_regs),
	.address_down_reg_out(address_down_reg_out),
	.address_up_reg_out(address_up_reg_out),
	.adress_on(adress_on),
	.d_0(d_0),
	.d_1(d_1),
	.d_2(d_2),
	.d_3(d_3),
	.data_out(data_out),
	.data_reg_out(data_reg_out),
	.doneLed(doneLed),
	.estados_c(estados_c),
	.funcao(funcao),
	.funcao_1(funcao_1),
	.habilita_count(habilita_count),
	.habilita_count2(habilita_count2),
	.led(led),
	.led00(led00),
	.led01(led01),
	.led10(led10),
	.led11(led11),
	.q(q),
	.sw_down(sw_down),
	.sw_up(sw_up),
	.sampler_rx(sampler)
);
endmodule

