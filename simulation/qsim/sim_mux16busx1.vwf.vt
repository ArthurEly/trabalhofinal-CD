// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/27/2023 12:58:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux16busx1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux16busx1_vlg_sample_tst(
	address0,
	address1,
	address2,
	address3,
	GN,
	mem0,
	mem1,
	mem2,
	mem3,
	mem4,
	mem5,
	mem6,
	mem7,
	mem8,
	mem9,
	memA,
	memB,
	memC,
	memD,
	memE,
	memF,
	sampler_tx
);
input  address0;
input  address1;
input  address2;
input  address3;
input  GN;
input [7:0] mem0;
input [7:0] mem1;
input [7:0] mem2;
input [7:0] mem3;
input [7:0] mem4;
input [7:0] mem5;
input [7:0] mem6;
input [7:0] mem7;
input [7:0] mem8;
input [7:0] mem9;
input [7:0] memA;
input [7:0] memB;
input [7:0] memC;
input [7:0] memD;
input [7:0] memE;
input [7:0] memF;
output sampler_tx;

reg sample;
time current_time;
always @(address0 or address1 or address2 or address3 or GN or mem0 or mem1 or mem2 or mem3 or mem4 or mem5 or mem6 or mem7 or mem8 or mem9 or memA or memB or memC or memD or memE or memF)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux16busx1_vlg_check_tst (
	data_out,
	sampler_rx
);
input [7:0] data_out;
input sampler_rx;

reg [7:0] data_out_expected;

reg [7:0] data_out_prev;

reg [7:0] data_out_expected_prev;

reg [7:0] last_data_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
end


// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | ",data_out_expected_prev);
	$display("| real data_out = %b | ",data_out_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux16busx1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg address0;
reg address1;
reg address2;
reg address3;
reg GN;
reg [7:0] mem0;
reg [7:0] mem1;
reg [7:0] mem2;
reg [7:0] mem3;
reg [7:0] mem4;
reg [7:0] mem5;
reg [7:0] mem6;
reg [7:0] mem7;
reg [7:0] mem8;
reg [7:0] mem9;
reg [7:0] memA;
reg [7:0] memB;
reg [7:0] memC;
reg [7:0] memD;
reg [7:0] memE;
reg [7:0] memF;
// wires                                               
wire [7:0] data_out;

wire sampler;                             

// assign statements (if any)                          
mux16busx1 i1 (
// port map - connection between master ports and signals/registers   
	.address0(address0),
	.address1(address1),
	.address2(address2),
	.address3(address3),
	.data_out(data_out),
	.GN(GN),
	.mem0(mem0),
	.mem1(mem1),
	.mem2(mem2),
	.mem3(mem3),
	.mem4(mem4),
	.mem5(mem5),
	.mem6(mem6),
	.mem7(mem7),
	.mem8(mem8),
	.mem9(mem9),
	.memA(memA),
	.memB(memB),
	.memC(memC),
	.memD(memD),
	.memE(memE),
	.memF(memF)
);

// address0
always
begin
	address0 = 1'b0;
	address0 = #20000 1'b1;
	#20000;
end 

// address1
initial
begin
	repeat(12)
	begin
		address1 = 1'b0;
		address1 = #40000 1'b1;
		# 40000;
	end
	address1 = 1'b0;
end 

// address2
initial
begin
	repeat(6)
	begin
		address2 = 1'b0;
		address2 = #80000 1'b1;
		# 80000;
	end
	address2 = 1'b0;
end 

// address3
initial
begin
	repeat(3)
	begin
		address3 = 1'b0;
		address3 = #160000 1'b1;
		# 160000;
	end
	address3 = 1'b0;
end 

// GN
initial
begin
	GN = 1'b0;
end 
// mem0[ 7 ]
initial
begin
	mem0[7] = 1'b0;
end 
// mem0[ 6 ]
initial
begin
	mem0[6] = 1'b0;
end 
// mem0[ 5 ]
initial
begin
	mem0[5] = 1'b0;
end 
// mem0[ 4 ]
initial
begin
	mem0[4] = 1'b0;
end 
// mem0[ 3 ]
initial
begin
	mem0[3] = 1'b0;
end 
// mem0[ 2 ]
initial
begin
	mem0[2] = 1'b0;
end 
// mem0[ 1 ]
initial
begin
	mem0[1] = 1'b0;
end 
// mem0[ 0 ]
initial
begin
	mem0[0] = 1'b0;
end 
// mem1[ 7 ]
initial
begin
	mem1[7] = 1'b0;
end 
// mem1[ 6 ]
initial
begin
	mem1[6] = 1'b0;
end 
// mem1[ 5 ]
initial
begin
	mem1[5] = 1'b0;
end 
// mem1[ 4 ]
initial
begin
	mem1[4] = 1'b0;
end 
// mem1[ 3 ]
initial
begin
	mem1[3] = 1'b0;
end 
// mem1[ 2 ]
initial
begin
	mem1[2] = 1'b0;
end 
// mem1[ 1 ]
initial
begin
	mem1[1] = 1'b0;
end 
// mem1[ 0 ]
initial
begin
	mem1[0] = 1'b1;
end 
// mem2[ 7 ]
initial
begin
	mem2[7] = 1'b0;
end 
// mem2[ 6 ]
initial
begin
	mem2[6] = 1'b0;
end 
// mem2[ 5 ]
initial
begin
	mem2[5] = 1'b0;
end 
// mem2[ 4 ]
initial
begin
	mem2[4] = 1'b0;
end 
// mem2[ 3 ]
initial
begin
	mem2[3] = 1'b0;
end 
// mem2[ 2 ]
initial
begin
	mem2[2] = 1'b0;
end 
// mem2[ 1 ]
initial
begin
	mem2[1] = 1'b1;
end 
// mem2[ 0 ]
initial
begin
	mem2[0] = 1'b0;
end 
// mem3[ 7 ]
initial
begin
	mem3[7] = 1'b0;
end 
// mem3[ 6 ]
initial
begin
	mem3[6] = 1'b0;
end 
// mem3[ 5 ]
initial
begin
	mem3[5] = 1'b0;
end 
// mem3[ 4 ]
initial
begin
	mem3[4] = 1'b0;
end 
// mem3[ 3 ]
initial
begin
	mem3[3] = 1'b0;
end 
// mem3[ 2 ]
initial
begin
	mem3[2] = 1'b0;
end 
// mem3[ 1 ]
initial
begin
	mem3[1] = 1'b1;
end 
// mem3[ 0 ]
initial
begin
	mem3[0] = 1'b1;
end 
// mem4[ 7 ]
initial
begin
	mem4[7] = 1'b0;
end 
// mem4[ 6 ]
initial
begin
	mem4[6] = 1'b0;
end 
// mem4[ 5 ]
initial
begin
	mem4[5] = 1'b0;
end 
// mem4[ 4 ]
initial
begin
	mem4[4] = 1'b0;
end 
// mem4[ 3 ]
initial
begin
	mem4[3] = 1'b0;
end 
// mem4[ 2 ]
initial
begin
	mem4[2] = 1'b1;
end 
// mem4[ 1 ]
initial
begin
	mem4[1] = 1'b0;
end 
// mem4[ 0 ]
initial
begin
	mem4[0] = 1'b0;
end 
// mem5[ 7 ]
initial
begin
	mem5[7] = 1'b0;
end 
// mem5[ 6 ]
initial
begin
	mem5[6] = 1'b0;
end 
// mem5[ 5 ]
initial
begin
	mem5[5] = 1'b0;
end 
// mem5[ 4 ]
initial
begin
	mem5[4] = 1'b0;
end 
// mem5[ 3 ]
initial
begin
	mem5[3] = 1'b0;
end 
// mem5[ 2 ]
initial
begin
	mem5[2] = 1'b1;
end 
// mem5[ 1 ]
initial
begin
	mem5[1] = 1'b0;
end 
// mem5[ 0 ]
initial
begin
	mem5[0] = 1'b1;
end 
// mem6[ 7 ]
initial
begin
	mem6[7] = 1'b0;
end 
// mem6[ 6 ]
initial
begin
	mem6[6] = 1'b0;
end 
// mem6[ 5 ]
initial
begin
	mem6[5] = 1'b0;
end 
// mem6[ 4 ]
initial
begin
	mem6[4] = 1'b0;
end 
// mem6[ 3 ]
initial
begin
	mem6[3] = 1'b0;
end 
// mem6[ 2 ]
initial
begin
	mem6[2] = 1'b1;
end 
// mem6[ 1 ]
initial
begin
	mem6[1] = 1'b1;
end 
// mem6[ 0 ]
initial
begin
	mem6[0] = 1'b0;
end 
// mem7[ 7 ]
initial
begin
	mem7[7] = 1'b0;
end 
// mem7[ 6 ]
initial
begin
	mem7[6] = 1'b0;
end 
// mem7[ 5 ]
initial
begin
	mem7[5] = 1'b0;
end 
// mem7[ 4 ]
initial
begin
	mem7[4] = 1'b0;
end 
// mem7[ 3 ]
initial
begin
	mem7[3] = 1'b0;
end 
// mem7[ 2 ]
initial
begin
	mem7[2] = 1'b1;
end 
// mem7[ 1 ]
initial
begin
	mem7[1] = 1'b1;
end 
// mem7[ 0 ]
initial
begin
	mem7[0] = 1'b1;
end 
// mem8[ 7 ]
initial
begin
	mem8[7] = 1'b0;
end 
// mem8[ 6 ]
initial
begin
	mem8[6] = 1'b0;
end 
// mem8[ 5 ]
initial
begin
	mem8[5] = 1'b0;
end 
// mem8[ 4 ]
initial
begin
	mem8[4] = 1'b0;
end 
// mem8[ 3 ]
initial
begin
	mem8[3] = 1'b1;
end 
// mem8[ 2 ]
initial
begin
	mem8[2] = 1'b0;
end 
// mem8[ 1 ]
initial
begin
	mem8[1] = 1'b0;
end 
// mem8[ 0 ]
initial
begin
	mem8[0] = 1'b0;
end 
// mem9[ 7 ]
initial
begin
	mem9[7] = 1'b0;
end 
// mem9[ 6 ]
initial
begin
	mem9[6] = 1'b0;
end 
// mem9[ 5 ]
initial
begin
	mem9[5] = 1'b0;
end 
// mem9[ 4 ]
initial
begin
	mem9[4] = 1'b0;
end 
// mem9[ 3 ]
initial
begin
	mem9[3] = 1'b1;
end 
// mem9[ 2 ]
initial
begin
	mem9[2] = 1'b0;
end 
// mem9[ 1 ]
initial
begin
	mem9[1] = 1'b0;
end 
// mem9[ 0 ]
initial
begin
	mem9[0] = 1'b1;
end 
// memA[ 7 ]
initial
begin
	memA[7] = 1'b0;
end 
// memA[ 6 ]
initial
begin
	memA[6] = 1'b0;
end 
// memA[ 5 ]
initial
begin
	memA[5] = 1'b0;
end 
// memA[ 4 ]
initial
begin
	memA[4] = 1'b0;
end 
// memA[ 3 ]
initial
begin
	memA[3] = 1'b1;
end 
// memA[ 2 ]
initial
begin
	memA[2] = 1'b0;
end 
// memA[ 1 ]
initial
begin
	memA[1] = 1'b1;
end 
// memA[ 0 ]
initial
begin
	memA[0] = 1'b0;
end 
// memB[ 7 ]
initial
begin
	memB[7] = 1'b0;
end 
// memB[ 6 ]
initial
begin
	memB[6] = 1'b0;
end 
// memB[ 5 ]
initial
begin
	memB[5] = 1'b0;
end 
// memB[ 4 ]
initial
begin
	memB[4] = 1'b0;
end 
// memB[ 3 ]
initial
begin
	memB[3] = 1'b1;
end 
// memB[ 2 ]
initial
begin
	memB[2] = 1'b0;
end 
// memB[ 1 ]
initial
begin
	memB[1] = 1'b1;
end 
// memB[ 0 ]
initial
begin
	memB[0] = 1'b1;
end 
// memC[ 7 ]
initial
begin
	memC[7] = 1'b0;
end 
// memC[ 6 ]
initial
begin
	memC[6] = 1'b0;
end 
// memC[ 5 ]
initial
begin
	memC[5] = 1'b0;
end 
// memC[ 4 ]
initial
begin
	memC[4] = 1'b0;
end 
// memC[ 3 ]
initial
begin
	memC[3] = 1'b1;
end 
// memC[ 2 ]
initial
begin
	memC[2] = 1'b1;
end 
// memC[ 1 ]
initial
begin
	memC[1] = 1'b0;
end 
// memC[ 0 ]
initial
begin
	memC[0] = 1'b0;
end 
// memD[ 7 ]
initial
begin
	memD[7] = 1'b0;
end 
// memD[ 6 ]
initial
begin
	memD[6] = 1'b0;
end 
// memD[ 5 ]
initial
begin
	memD[5] = 1'b0;
end 
// memD[ 4 ]
initial
begin
	memD[4] = 1'b0;
end 
// memD[ 3 ]
initial
begin
	memD[3] = 1'b1;
end 
// memD[ 2 ]
initial
begin
	memD[2] = 1'b1;
end 
// memD[ 1 ]
initial
begin
	memD[1] = 1'b0;
end 
// memD[ 0 ]
initial
begin
	memD[0] = 1'b1;
end 
// memE[ 7 ]
initial
begin
	memE[7] = 1'b0;
end 
// memE[ 6 ]
initial
begin
	memE[6] = 1'b0;
end 
// memE[ 5 ]
initial
begin
	memE[5] = 1'b0;
end 
// memE[ 4 ]
initial
begin
	memE[4] = 1'b0;
end 
// memE[ 3 ]
initial
begin
	memE[3] = 1'b1;
end 
// memE[ 2 ]
initial
begin
	memE[2] = 1'b1;
end 
// memE[ 1 ]
initial
begin
	memE[1] = 1'b1;
end 
// memE[ 0 ]
initial
begin
	memE[0] = 1'b0;
end 
// memF[ 7 ]
initial
begin
	memF[7] = 1'b0;
end 
// memF[ 6 ]
initial
begin
	memF[6] = 1'b0;
end 
// memF[ 5 ]
initial
begin
	memF[5] = 1'b0;
end 
// memF[ 4 ]
initial
begin
	memF[4] = 1'b0;
end 
// memF[ 3 ]
initial
begin
	memF[3] = 1'b1;
end 
// memF[ 2 ]
initial
begin
	memF[2] = 1'b1;
end 
// memF[ 1 ]
initial
begin
	memF[1] = 1'b1;
end 
// memF[ 0 ]
initial
begin
	memF[0] = 1'b1;
end 

mux16busx1_vlg_sample_tst tb_sample (
	.address0(address0),
	.address1(address1),
	.address2(address2),
	.address3(address3),
	.GN(GN),
	.mem0(mem0),
	.mem1(mem1),
	.mem2(mem2),
	.mem3(mem3),
	.mem4(mem4),
	.mem5(mem5),
	.mem6(mem6),
	.mem7(mem7),
	.mem8(mem8),
	.mem9(mem9),
	.memA(memA),
	.memB(memB),
	.memC(memC),
	.memD(memD),
	.memE(memE),
	.memF(memF),
	.sampler_tx(sampler)
);

mux16busx1_vlg_check_tst tb_out(
	.data_out(data_out),
	.sampler_rx(sampler)
);
endmodule

