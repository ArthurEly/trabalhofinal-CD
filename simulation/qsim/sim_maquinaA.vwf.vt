// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2023 14:53:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MAQUINA_A
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MAQUINA_A_vlg_sample_tst(
	clk,
	confirmaDA,
	confirmaFuncao,
	habilita,
	sampler_tx
);
input  clk;
input  confirmaDA;
input  confirmaFuncao;
input  habilita;
output sampler_tx;

reg sample;
time current_time;
always @(clk or confirmaDA or confirmaFuncao or habilita)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MAQUINA_A_vlg_check_tst (
	A_MSG_D_A,
	A_VISOR_OK,
	A_WRITE_IN_ADDRESS,
	ESTADO,
	flagzinha,
	habilita_count,
	LOAD_REG,
	sampler_rx
);
input  A_MSG_D_A;
input  A_VISOR_OK;
input  A_WRITE_IN_ADDRESS;
input [1:0] ESTADO;
input  flagzinha;
input  habilita_count;
input  LOAD_REG;
input sampler_rx;

reg  A_MSG_D_A_expected;
reg  A_VISOR_OK_expected;
reg  A_WRITE_IN_ADDRESS_expected;
reg [1:0] ESTADO_expected;
reg  flagzinha_expected;
reg  habilita_count_expected;
reg  LOAD_REG_expected;

reg  A_MSG_D_A_prev;
reg  A_VISOR_OK_prev;
reg  A_WRITE_IN_ADDRESS_prev;
reg [1:0] ESTADO_prev;
reg  flagzinha_prev;
reg  habilita_count_prev;
reg  LOAD_REG_prev;

reg  A_MSG_D_A_expected_prev;
reg  A_VISOR_OK_expected_prev;
reg  A_WRITE_IN_ADDRESS_expected_prev;
reg [1:0] ESTADO_expected_prev;
reg  flagzinha_expected_prev;
reg  habilita_count_expected_prev;
reg  LOAD_REG_expected_prev;

reg  last_A_MSG_D_A_exp;
reg  last_A_VISOR_OK_exp;
reg  last_A_WRITE_IN_ADDRESS_exp;
reg [1:0] last_ESTADO_exp;
reg  last_flagzinha_exp;
reg  last_habilita_count_exp;
reg  last_LOAD_REG_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_MSG_D_A_prev = A_MSG_D_A;
	A_VISOR_OK_prev = A_VISOR_OK;
	A_WRITE_IN_ADDRESS_prev = A_WRITE_IN_ADDRESS;
	ESTADO_prev = ESTADO;
	flagzinha_prev = flagzinha;
	habilita_count_prev = habilita_count;
	LOAD_REG_prev = LOAD_REG;
end

// update expected /o prevs

always @(trigger)
begin
	A_MSG_D_A_expected_prev = A_MSG_D_A_expected;
	A_VISOR_OK_expected_prev = A_VISOR_OK_expected;
	A_WRITE_IN_ADDRESS_expected_prev = A_WRITE_IN_ADDRESS_expected;
	ESTADO_expected_prev = ESTADO_expected;
	flagzinha_expected_prev = flagzinha_expected;
	habilita_count_expected_prev = habilita_count_expected;
	LOAD_REG_expected_prev = LOAD_REG_expected;
end



// expected A_WRITE_IN_ADDRESS
initial
begin
	A_WRITE_IN_ADDRESS_expected = 1'bX;
end 

// expected LOAD_REG
initial
begin
	LOAD_REG_expected = 1'bX;
end 

// expected A_MSG_D_A
initial
begin
	A_MSG_D_A_expected = 1'bX;
end 

// expected A_VISOR_OK
initial
begin
	A_VISOR_OK_expected = 1'bX;
end 

// expected habilita_count
initial
begin
	habilita_count_expected = 1'bX;
end 
// expected ESTADO[ 1 ]
initial
begin
	ESTADO_expected[1] = 1'bX;
end 
// expected ESTADO[ 0 ]
initial
begin
	ESTADO_expected[0] = 1'bX;
end 

// expected flagzinha
initial
begin
	flagzinha_expected = 1'bX;
end 
// generate trigger
always @(A_MSG_D_A_expected or A_MSG_D_A or A_VISOR_OK_expected or A_VISOR_OK or A_WRITE_IN_ADDRESS_expected or A_WRITE_IN_ADDRESS or ESTADO_expected or ESTADO or flagzinha_expected or flagzinha or habilita_count_expected or habilita_count or LOAD_REG_expected or LOAD_REG)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_MSG_D_A = %b | expected A_VISOR_OK = %b | expected A_WRITE_IN_ADDRESS = %b | expected ESTADO = %b | expected flagzinha = %b | expected habilita_count = %b | expected LOAD_REG = %b | ",A_MSG_D_A_expected_prev,A_VISOR_OK_expected_prev,A_WRITE_IN_ADDRESS_expected_prev,ESTADO_expected_prev,flagzinha_expected_prev,habilita_count_expected_prev,LOAD_REG_expected_prev);
	$display("| real A_MSG_D_A = %b | real A_VISOR_OK = %b | real A_WRITE_IN_ADDRESS = %b | real ESTADO = %b | real flagzinha = %b | real habilita_count = %b | real LOAD_REG = %b | ",A_MSG_D_A_prev,A_VISOR_OK_prev,A_WRITE_IN_ADDRESS_prev,ESTADO_prev,flagzinha_prev,habilita_count_prev,LOAD_REG_prev);
`endif
	if (
		( A_MSG_D_A_expected_prev !== 1'bx ) && ( A_MSG_D_A_prev !== A_MSG_D_A_expected_prev )
		&& ((A_MSG_D_A_expected_prev !== last_A_MSG_D_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_MSG_D_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_MSG_D_A_expected_prev);
		$display ("     Real value = %b", A_MSG_D_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_MSG_D_A_exp = A_MSG_D_A_expected_prev;
	end
	if (
		( A_VISOR_OK_expected_prev !== 1'bx ) && ( A_VISOR_OK_prev !== A_VISOR_OK_expected_prev )
		&& ((A_VISOR_OK_expected_prev !== last_A_VISOR_OK_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_VISOR_OK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_VISOR_OK_expected_prev);
		$display ("     Real value = %b", A_VISOR_OK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A_VISOR_OK_exp = A_VISOR_OK_expected_prev;
	end
	if (
		( A_WRITE_IN_ADDRESS_expected_prev !== 1'bx ) && ( A_WRITE_IN_ADDRESS_prev !== A_WRITE_IN_ADDRESS_expected_prev )
		&& ((A_WRITE_IN_ADDRESS_expected_prev !== last_A_WRITE_IN_ADDRESS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_WRITE_IN_ADDRESS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_WRITE_IN_ADDRESS_expected_prev);
		$display ("     Real value = %b", A_WRITE_IN_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A_WRITE_IN_ADDRESS_exp = A_WRITE_IN_ADDRESS_expected_prev;
	end
	if (
		( ESTADO_expected_prev[0] !== 1'bx ) && ( ESTADO_prev[0] !== ESTADO_expected_prev[0] )
		&& ((ESTADO_expected_prev[0] !== last_ESTADO_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADO_expected_prev);
		$display ("     Real value = %b", ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ESTADO_exp[0] = ESTADO_expected_prev[0];
	end
	if (
		( ESTADO_expected_prev[1] !== 1'bx ) && ( ESTADO_prev[1] !== ESTADO_expected_prev[1] )
		&& ((ESTADO_expected_prev[1] !== last_ESTADO_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADO_expected_prev);
		$display ("     Real value = %b", ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ESTADO_exp[1] = ESTADO_expected_prev[1];
	end
	if (
		( flagzinha_expected_prev !== 1'bx ) && ( flagzinha_prev !== flagzinha_expected_prev )
		&& ((flagzinha_expected_prev !== last_flagzinha_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagzinha :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagzinha_expected_prev);
		$display ("     Real value = %b", flagzinha_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_flagzinha_exp = flagzinha_expected_prev;
	end
	if (
		( habilita_count_expected_prev !== 1'bx ) && ( habilita_count_prev !== habilita_count_expected_prev )
		&& ((habilita_count_expected_prev !== last_habilita_count_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habilita_count :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habilita_count_expected_prev);
		$display ("     Real value = %b", habilita_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_habilita_count_exp = habilita_count_expected_prev;
	end
	if (
		( LOAD_REG_expected_prev !== 1'bx ) && ( LOAD_REG_prev !== LOAD_REG_expected_prev )
		&& ((LOAD_REG_expected_prev !== last_LOAD_REG_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_REG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_REG_expected_prev);
		$display ("     Real value = %b", LOAD_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LOAD_REG_exp = LOAD_REG_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MAQUINA_A_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg confirmaDA;
reg confirmaFuncao;
reg habilita;
// wires                                               
wire A_MSG_D_A;
wire A_VISOR_OK;
wire A_WRITE_IN_ADDRESS;
wire [1:0] ESTADO;
wire flagzinha;
wire habilita_count;
wire LOAD_REG;

wire sampler;                             

// assign statements (if any)                          
MAQUINA_A i1 (
// port map - connection between master ports and signals/registers   
	.A_MSG_D_A(A_MSG_D_A),
	.A_VISOR_OK(A_VISOR_OK),
	.A_WRITE_IN_ADDRESS(A_WRITE_IN_ADDRESS),
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.ESTADO(ESTADO),
	.flagzinha(flagzinha),
	.habilita(habilita),
	.habilita_count(habilita_count),
	.LOAD_REG(LOAD_REG)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// habilita
initial
begin
	habilita = 1'b1;
end 

// confirmaDA
initial
begin
	confirmaDA = 1'b0;
	confirmaDA = #10000 1'b1;
	confirmaDA = #20000 1'b0;
	confirmaDA = #20000 1'b1;
	confirmaDA = #20000 1'b0;
end 

// confirmaFuncao
initial
begin
	confirmaFuncao = 1'b0;
	confirmaFuncao = #90000 1'b1;
	confirmaFuncao = #30000 1'b0;
	confirmaFuncao = #90000 1'b1;
	confirmaFuncao = #220000 1'b0;
	confirmaFuncao = #60000 1'b1;
	confirmaFuncao = #40000 1'b0;
	confirmaFuncao = #150000 1'b1;
	confirmaFuncao = #190000 1'b0;
end 

MAQUINA_A_vlg_sample_tst tb_sample (
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.habilita(habilita),
	.sampler_tx(sampler)
);

MAQUINA_A_vlg_check_tst tb_out(
	.A_MSG_D_A(A_MSG_D_A),
	.A_VISOR_OK(A_VISOR_OK),
	.A_WRITE_IN_ADDRESS(A_WRITE_IN_ADDRESS),
	.ESTADO(ESTADO),
	.flagzinha(flagzinha),
	.habilita_count(habilita_count),
	.LOAD_REG(LOAD_REG),
	.sampler_rx(sampler)
);
endmodule

