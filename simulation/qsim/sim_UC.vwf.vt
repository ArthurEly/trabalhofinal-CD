// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2023 17:41:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UC_vlg_sample_tst(
	clk,
	confirmaDA,
	confirmaFuncao,
	trocaFuncao,
	sampler_tx
);
input  clk;
input  confirmaDA;
input  confirmaFuncao;
input  trocaFuncao;
output sampler_tx;

reg sample;
time current_time;
always @(clk or confirmaDA or confirmaFuncao or trocaFuncao)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UC_vlg_check_tst (
	A_ESTADO,
	A_LOAD_REGS,
	A_mostraDA,
	B_done,
	B_ESTADO8,
	B_LOAD_END,
	B_mostraD,
	C_ESTADO,
	count,
	LOAD_READ,
	LOAD_SWAP_ADDRESS,
	LOAD_SWAP_DATA,
	msg_done,
	S_mostraE,
	write,
	sampler_rx
);
input [1:0] A_ESTADO;
input  A_LOAD_REGS;
input  A_mostraDA;
input  B_done;
input  B_ESTADO8;
input  B_LOAD_END;
input  B_mostraD;
input [1:0] C_ESTADO;
input [1:0] count;
input  LOAD_READ;
input  LOAD_SWAP_ADDRESS;
input  LOAD_SWAP_DATA;
input  msg_done;
input  S_mostraE;
input  write;
input sampler_rx;

reg [1:0] A_ESTADO_expected;
reg  A_LOAD_REGS_expected;
reg  A_mostraDA_expected;
reg  B_done_expected;
reg  B_ESTADO8_expected;
reg  B_LOAD_END_expected;
reg  B_mostraD_expected;
reg [1:0] C_ESTADO_expected;
reg [1:0] count_expected;
reg  LOAD_READ_expected;
reg  LOAD_SWAP_ADDRESS_expected;
reg  LOAD_SWAP_DATA_expected;
reg  msg_done_expected;
reg  S_mostraE_expected;
reg  write_expected;

reg [1:0] A_ESTADO_prev;
reg  A_LOAD_REGS_prev;
reg  A_mostraDA_prev;
reg  B_done_prev;
reg  B_ESTADO8_prev;
reg  B_LOAD_END_prev;
reg  B_mostraD_prev;
reg [1:0] C_ESTADO_prev;
reg [1:0] count_prev;
reg  LOAD_READ_prev;
reg  LOAD_SWAP_ADDRESS_prev;
reg  LOAD_SWAP_DATA_prev;
reg  msg_done_prev;
reg  S_mostraE_prev;
reg  write_prev;

reg [1:0] A_ESTADO_expected_prev;
reg  A_LOAD_REGS_expected_prev;
reg  A_mostraDA_expected_prev;
reg  B_done_expected_prev;
reg  B_ESTADO8_expected_prev;
reg  B_LOAD_END_expected_prev;
reg  B_mostraD_expected_prev;
reg [1:0] C_ESTADO_expected_prev;
reg [1:0] count_expected_prev;
reg  LOAD_READ_expected_prev;
reg  LOAD_SWAP_ADDRESS_expected_prev;
reg  LOAD_SWAP_DATA_expected_prev;
reg  msg_done_expected_prev;
reg  S_mostraE_expected_prev;
reg  write_expected_prev;

reg [1:0] last_A_ESTADO_exp;
reg  last_A_LOAD_REGS_exp;
reg  last_A_mostraDA_exp;
reg  last_B_done_exp;
reg  last_B_ESTADO8_exp;
reg  last_B_LOAD_END_exp;
reg  last_B_mostraD_exp;
reg [1:0] last_C_ESTADO_exp;
reg [1:0] last_count_exp;
reg  last_LOAD_READ_exp;
reg  last_LOAD_SWAP_ADDRESS_exp;
reg  last_LOAD_SWAP_DATA_exp;
reg  last_msg_done_exp;
reg  last_S_mostraE_exp;
reg  last_write_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_ESTADO_prev = A_ESTADO;
	A_LOAD_REGS_prev = A_LOAD_REGS;
	A_mostraDA_prev = A_mostraDA;
	B_done_prev = B_done;
	B_ESTADO8_prev = B_ESTADO8;
	B_LOAD_END_prev = B_LOAD_END;
	B_mostraD_prev = B_mostraD;
	C_ESTADO_prev = C_ESTADO;
	count_prev = count;
	LOAD_READ_prev = LOAD_READ;
	LOAD_SWAP_ADDRESS_prev = LOAD_SWAP_ADDRESS;
	LOAD_SWAP_DATA_prev = LOAD_SWAP_DATA;
	msg_done_prev = msg_done;
	S_mostraE_prev = S_mostraE;
	write_prev = write;
end

// update expected /o prevs

always @(trigger)
begin
	A_ESTADO_expected_prev = A_ESTADO_expected;
	A_LOAD_REGS_expected_prev = A_LOAD_REGS_expected;
	A_mostraDA_expected_prev = A_mostraDA_expected;
	B_done_expected_prev = B_done_expected;
	B_ESTADO8_expected_prev = B_ESTADO8_expected;
	B_LOAD_END_expected_prev = B_LOAD_END_expected;
	B_mostraD_expected_prev = B_mostraD_expected;
	C_ESTADO_expected_prev = C_ESTADO_expected;
	count_expected_prev = count_expected;
	LOAD_READ_expected_prev = LOAD_READ_expected;
	LOAD_SWAP_ADDRESS_expected_prev = LOAD_SWAP_ADDRESS_expected;
	LOAD_SWAP_DATA_expected_prev = LOAD_SWAP_DATA_expected;
	msg_done_expected_prev = msg_done_expected;
	S_mostraE_expected_prev = S_mostraE_expected;
	write_expected_prev = write_expected;
end


// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
	count_expected[1] = #999000 1'b0;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
	count_expected[0] = #999000 1'b0;
end 

// expected A_LOAD_REGS
initial
begin
	A_LOAD_REGS_expected = 1'bX;
	A_LOAD_REGS_expected = #999000 1'b0;
end 

// expected B_LOAD_END
initial
begin
	B_LOAD_END_expected = 1'bX;
	B_LOAD_END_expected = #999000 1'b0;
end 

// expected LOAD_READ
initial
begin
	LOAD_READ_expected = 1'bX;
	LOAD_READ_expected = #999000 1'b0;
end 

// expected LOAD_SWAP_ADDRESS
initial
begin
	LOAD_SWAP_ADDRESS_expected = 1'bX;
	LOAD_SWAP_ADDRESS_expected = #999000 1'b0;
end 

// expected LOAD_SWAP_DATA
initial
begin
	LOAD_SWAP_DATA_expected = 1'bX;
	LOAD_SWAP_DATA_expected = #999000 1'b0;
end 

// expected write
initial
begin
	write_expected = 1'bX;
	write_expected = #999000 1'b0;
end 

// expected A_mostraDA
initial
begin
	A_mostraDA_expected = 1'bX;
	A_mostraDA_expected = #999000 1'b0;
end 

// expected B_done
initial
begin
	B_done_expected = 1'bX;
	B_done_expected = #999000 1'b0;
end 

// expected B_mostraD
initial
begin
	B_mostraD_expected = 1'bX;
	B_mostraD_expected = #999000 1'b0;
end 

// expected S_mostraE
initial
begin
	S_mostraE_expected = 1'bX;
	S_mostraE_expected = #999000 1'b0;
end 

// expected msg_done
initial
begin
	msg_done_expected = 1'bX;
	msg_done_expected = #999000 1'b0;
end 
// expected A_ESTADO[ 1 ]
initial
begin
	A_ESTADO_expected[1] = 1'bX;
	A_ESTADO_expected[1] = #999000 1'b0;
end 
// expected A_ESTADO[ 0 ]
initial
begin
	A_ESTADO_expected[0] = 1'bX;
	A_ESTADO_expected[0] = #999000 1'b0;
end 
// expected C_ESTADO[ 1 ]
initial
begin
	C_ESTADO_expected[1] = 1'bX;
	C_ESTADO_expected[1] = #999000 1'b0;
end 
// expected C_ESTADO[ 0 ]
initial
begin
	C_ESTADO_expected[0] = 1'bX;
	C_ESTADO_expected[0] = #999000 1'b0;
end 

// expected B_ESTADO8
initial
begin
	B_ESTADO8_expected = 1'bX;
	B_ESTADO8_expected = #999000 1'b0;
end 
// generate trigger
always @(A_ESTADO_expected or A_ESTADO or A_LOAD_REGS_expected or A_LOAD_REGS or A_mostraDA_expected or A_mostraDA or B_done_expected or B_done or B_ESTADO8_expected or B_ESTADO8 or B_LOAD_END_expected or B_LOAD_END or B_mostraD_expected or B_mostraD or C_ESTADO_expected or C_ESTADO or count_expected or count or LOAD_READ_expected or LOAD_READ or LOAD_SWAP_ADDRESS_expected or LOAD_SWAP_ADDRESS or LOAD_SWAP_DATA_expected or LOAD_SWAP_DATA or msg_done_expected or msg_done or S_mostraE_expected or S_mostraE or write_expected or write)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_ESTADO = %b | expected A_LOAD_REGS = %b | expected A_mostraDA = %b | expected B_done = %b | expected B_ESTADO8 = %b | expected B_LOAD_END = %b | expected B_mostraD = %b | expected C_ESTADO = %b | expected count = %b | expected LOAD_READ = %b | expected LOAD_SWAP_ADDRESS = %b | expected LOAD_SWAP_DATA = %b | expected msg_done = %b | expected S_mostraE = %b | expected write = %b | ",A_ESTADO_expected_prev,A_LOAD_REGS_expected_prev,A_mostraDA_expected_prev,B_done_expected_prev,B_ESTADO8_expected_prev,B_LOAD_END_expected_prev,B_mostraD_expected_prev,C_ESTADO_expected_prev,count_expected_prev,LOAD_READ_expected_prev,LOAD_SWAP_ADDRESS_expected_prev,LOAD_SWAP_DATA_expected_prev,msg_done_expected_prev,S_mostraE_expected_prev,write_expected_prev);
	$display("| real A_ESTADO = %b | real A_LOAD_REGS = %b | real A_mostraDA = %b | real B_done = %b | real B_ESTADO8 = %b | real B_LOAD_END = %b | real B_mostraD = %b | real C_ESTADO = %b | real count = %b | real LOAD_READ = %b | real LOAD_SWAP_ADDRESS = %b | real LOAD_SWAP_DATA = %b | real msg_done = %b | real S_mostraE = %b | real write = %b | ",A_ESTADO_prev,A_LOAD_REGS_prev,A_mostraDA_prev,B_done_prev,B_ESTADO8_prev,B_LOAD_END_prev,B_mostraD_prev,C_ESTADO_prev,count_prev,LOAD_READ_prev,LOAD_SWAP_ADDRESS_prev,LOAD_SWAP_DATA_prev,msg_done_prev,S_mostraE_prev,write_prev);
`endif
	if (
		( A_ESTADO_expected_prev[0] !== 1'bx ) && ( A_ESTADO_prev[0] !== A_ESTADO_expected_prev[0] )
		&& ((A_ESTADO_expected_prev[0] !== last_A_ESTADO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_ESTADO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_ESTADO_expected_prev);
		$display ("     Real value = %b", A_ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_ESTADO_exp[0] = A_ESTADO_expected_prev[0];
	end
	if (
		( A_ESTADO_expected_prev[1] !== 1'bx ) && ( A_ESTADO_prev[1] !== A_ESTADO_expected_prev[1] )
		&& ((A_ESTADO_expected_prev[1] !== last_A_ESTADO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_ESTADO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_ESTADO_expected_prev);
		$display ("     Real value = %b", A_ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_ESTADO_exp[1] = A_ESTADO_expected_prev[1];
	end
	if (
		( A_LOAD_REGS_expected_prev !== 1'bx ) && ( A_LOAD_REGS_prev !== A_LOAD_REGS_expected_prev )
		&& ((A_LOAD_REGS_expected_prev !== last_A_LOAD_REGS_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_LOAD_REGS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_LOAD_REGS_expected_prev);
		$display ("     Real value = %b", A_LOAD_REGS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A_LOAD_REGS_exp = A_LOAD_REGS_expected_prev;
	end
	if (
		( A_mostraDA_expected_prev !== 1'bx ) && ( A_mostraDA_prev !== A_mostraDA_expected_prev )
		&& ((A_mostraDA_expected_prev !== last_A_mostraDA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_mostraDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_mostraDA_expected_prev);
		$display ("     Real value = %b", A_mostraDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A_mostraDA_exp = A_mostraDA_expected_prev;
	end
	if (
		( B_done_expected_prev !== 1'bx ) && ( B_done_prev !== B_done_expected_prev )
		&& ((B_done_expected_prev !== last_B_done_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_done_expected_prev);
		$display ("     Real value = %b", B_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_done_exp = B_done_expected_prev;
	end
	if (
		( B_ESTADO8_expected_prev !== 1'bx ) && ( B_ESTADO8_prev !== B_ESTADO8_expected_prev )
		&& ((B_ESTADO8_expected_prev !== last_B_ESTADO8_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_ESTADO8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_ESTADO8_expected_prev);
		$display ("     Real value = %b", B_ESTADO8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_B_ESTADO8_exp = B_ESTADO8_expected_prev;
	end
	if (
		( B_LOAD_END_expected_prev !== 1'bx ) && ( B_LOAD_END_prev !== B_LOAD_END_expected_prev )
		&& ((B_LOAD_END_expected_prev !== last_B_LOAD_END_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_LOAD_END :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_LOAD_END_expected_prev);
		$display ("     Real value = %b", B_LOAD_END_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_B_LOAD_END_exp = B_LOAD_END_expected_prev;
	end
	if (
		( B_mostraD_expected_prev !== 1'bx ) && ( B_mostraD_prev !== B_mostraD_expected_prev )
		&& ((B_mostraD_expected_prev !== last_B_mostraD_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_mostraD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_mostraD_expected_prev);
		$display ("     Real value = %b", B_mostraD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_B_mostraD_exp = B_mostraD_expected_prev;
	end
	if (
		( C_ESTADO_expected_prev[0] !== 1'bx ) && ( C_ESTADO_prev[0] !== C_ESTADO_expected_prev[0] )
		&& ((C_ESTADO_expected_prev[0] !== last_C_ESTADO_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_ESTADO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_ESTADO_expected_prev);
		$display ("     Real value = %b", C_ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C_ESTADO_exp[0] = C_ESTADO_expected_prev[0];
	end
	if (
		( C_ESTADO_expected_prev[1] !== 1'bx ) && ( C_ESTADO_prev[1] !== C_ESTADO_expected_prev[1] )
		&& ((C_ESTADO_expected_prev[1] !== last_C_ESTADO_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_ESTADO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_ESTADO_expected_prev);
		$display ("     Real value = %b", C_ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C_ESTADO_exp[1] = C_ESTADO_expected_prev[1];
	end
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( LOAD_READ_expected_prev !== 1'bx ) && ( LOAD_READ_prev !== LOAD_READ_expected_prev )
		&& ((LOAD_READ_expected_prev !== last_LOAD_READ_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_READ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_READ_expected_prev);
		$display ("     Real value = %b", LOAD_READ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LOAD_READ_exp = LOAD_READ_expected_prev;
	end
	if (
		( LOAD_SWAP_ADDRESS_expected_prev !== 1'bx ) && ( LOAD_SWAP_ADDRESS_prev !== LOAD_SWAP_ADDRESS_expected_prev )
		&& ((LOAD_SWAP_ADDRESS_expected_prev !== last_LOAD_SWAP_ADDRESS_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_SWAP_ADDRESS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_SWAP_ADDRESS_expected_prev);
		$display ("     Real value = %b", LOAD_SWAP_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LOAD_SWAP_ADDRESS_exp = LOAD_SWAP_ADDRESS_expected_prev;
	end
	if (
		( LOAD_SWAP_DATA_expected_prev !== 1'bx ) && ( LOAD_SWAP_DATA_prev !== LOAD_SWAP_DATA_expected_prev )
		&& ((LOAD_SWAP_DATA_expected_prev !== last_LOAD_SWAP_DATA_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_SWAP_DATA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_SWAP_DATA_expected_prev);
		$display ("     Real value = %b", LOAD_SWAP_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LOAD_SWAP_DATA_exp = LOAD_SWAP_DATA_expected_prev;
	end
	if (
		( msg_done_expected_prev !== 1'bx ) && ( msg_done_prev !== msg_done_expected_prev )
		&& ((msg_done_expected_prev !== last_msg_done_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port msg_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", msg_done_expected_prev);
		$display ("     Real value = %b", msg_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_msg_done_exp = msg_done_expected_prev;
	end
	if (
		( S_mostraE_expected_prev !== 1'bx ) && ( S_mostraE_prev !== S_mostraE_expected_prev )
		&& ((S_mostraE_expected_prev !== last_S_mostraE_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_mostraE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_mostraE_expected_prev);
		$display ("     Real value = %b", S_mostraE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_S_mostraE_exp = S_mostraE_expected_prev;
	end
	if (
		( write_expected_prev !== 1'bx ) && ( write_prev !== write_expected_prev )
		&& ((write_expected_prev !== last_write_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_expected_prev);
		$display ("     Real value = %b", write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_write_exp = write_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg confirmaDA;
reg confirmaFuncao;
reg trocaFuncao;
// wires                                               
wire [1:0] A_ESTADO;
wire A_LOAD_REGS;
wire A_mostraDA;
wire B_done;
wire B_ESTADO8;
wire B_LOAD_END;
wire B_mostraD;
wire [1:0] C_ESTADO;
wire [1:0] count;
wire LOAD_READ;
wire LOAD_SWAP_ADDRESS;
wire LOAD_SWAP_DATA;
wire msg_done;
wire S_mostraE;
wire write;

wire sampler;                             

// assign statements (if any)                          
UC i1 (
// port map - connection between master ports and signals/registers   
	.A_ESTADO(A_ESTADO),
	.A_LOAD_REGS(A_LOAD_REGS),
	.A_mostraDA(A_mostraDA),
	.B_done(B_done),
	.B_ESTADO8(B_ESTADO8),
	.B_LOAD_END(B_LOAD_END),
	.B_mostraD(B_mostraD),
	.C_ESTADO(C_ESTADO),
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.count(count),
	.LOAD_READ(LOAD_READ),
	.LOAD_SWAP_ADDRESS(LOAD_SWAP_ADDRESS),
	.LOAD_SWAP_DATA(LOAD_SWAP_DATA),
	.msg_done(msg_done),
	.S_mostraE(S_mostraE),
	.trocaFuncao(trocaFuncao),
	.write(write)
);

// clk
always
begin
	clk = 1'b0;
	clk = #12500 1'b1;
	#12500;
end 

// trocaFuncao
always
begin
	trocaFuncao = 1'b0;
	trocaFuncao = #75000 1'b1;
	#75000;
end 

// confirmaDA
initial
begin
	confirmaDA = 1'b0;
end 

// confirmaFuncao
initial
begin
	confirmaFuncao = 1'b0;
end 

UC_vlg_sample_tst tb_sample (
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.trocaFuncao(trocaFuncao),
	.sampler_tx(sampler)
);

UC_vlg_check_tst tb_out(
	.A_ESTADO(A_ESTADO),
	.A_LOAD_REGS(A_LOAD_REGS),
	.A_mostraDA(A_mostraDA),
	.B_done(B_done),
	.B_ESTADO8(B_ESTADO8),
	.B_LOAD_END(B_LOAD_END),
	.B_mostraD(B_mostraD),
	.C_ESTADO(C_ESTADO),
	.count(count),
	.LOAD_READ(LOAD_READ),
	.LOAD_SWAP_ADDRESS(LOAD_SWAP_ADDRESS),
	.LOAD_SWAP_DATA(LOAD_SWAP_DATA),
	.msg_done(msg_done),
	.S_mostraE(S_mostraE),
	.write(write),
	.sampler_rx(sampler)
);
endmodule

