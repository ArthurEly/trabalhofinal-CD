// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2023 05:24:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trabalhofinalfinal_
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trabalhofinalfinal__vlg_sample_tst(
	clock,
	confirma_DA,
	confirma_funcao,
	sw0,
	sw1,
	sw2,
	sw3,
	sw4,
	sw5,
	sw6,
	sw7,
	sw8,
	sw9,
	troca_funcao,
	sampler_tx
);
input  clock;
input  confirma_DA;
input  confirma_funcao;
input  sw0;
input  sw1;
input  sw2;
input  sw3;
input  sw4;
input  sw5;
input  sw6;
input  sw7;
input  sw8;
input  sw9;
input  troca_funcao;
output sampler_tx;

reg sample;
time current_time;
always @(clock or confirma_DA or confirma_funcao or sw0 or sw1 or sw2 or sw3 or sw4 or sw5 or sw6 or sw7 or sw8 or sw9 or troca_funcao)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trabalhofinalfinal__vlg_check_tst (
	a_load_regs,
	address_down_reg_out,
	address_up_reg_out,
	adress_on,
	data_out,
	data_reg_out,
	estados_c,
	funcao,
	funcao_1,
	habilita_count,
	habilita_count2,
	q,
	sw_down,
	sw_up,
	sampler_rx
);
input  a_load_regs;
input [7:0] address_down_reg_out;
input [7:0] address_up_reg_out;
input  adress_on;
input [7:0] data_out;
input [7:0] data_reg_out;
input [1:0] estados_c;
input [1:0] funcao;
input  funcao_1;
input  habilita_count;
input  habilita_count2;
input  q;
input [7:0] sw_down;
input [7:0] sw_up;
input sampler_rx;

reg  a_load_regs_expected;
reg [7:0] address_down_reg_out_expected;
reg [7:0] address_up_reg_out_expected;
reg  adress_on_expected;
reg [7:0] data_out_expected;
reg [7:0] data_reg_out_expected;
reg [1:0] estados_c_expected;
reg [1:0] funcao_expected;
reg  funcao_1_expected;
reg  habilita_count_expected;
reg  habilita_count2_expected;
reg  q_expected;
reg [7:0] sw_down_expected;
reg [7:0] sw_up_expected;

reg  a_load_regs_prev;
reg [7:0] address_down_reg_out_prev;
reg [7:0] address_up_reg_out_prev;
reg  adress_on_prev;
reg [7:0] data_out_prev;
reg [7:0] data_reg_out_prev;
reg [1:0] estados_c_prev;
reg [1:0] funcao_prev;
reg  funcao_1_prev;
reg  habilita_count_prev;
reg  habilita_count2_prev;
reg  q_prev;
reg [7:0] sw_down_prev;
reg [7:0] sw_up_prev;

reg  a_load_regs_expected_prev;
reg [7:0] address_down_reg_out_expected_prev;
reg [7:0] address_up_reg_out_expected_prev;
reg  adress_on_expected_prev;
reg [7:0] data_out_expected_prev;
reg [7:0] data_reg_out_expected_prev;
reg [1:0] estados_c_expected_prev;
reg [1:0] funcao_expected_prev;
reg  funcao_1_expected_prev;
reg  habilita_count_expected_prev;
reg  habilita_count2_expected_prev;
reg  q_expected_prev;
reg [7:0] sw_down_expected_prev;
reg [7:0] sw_up_expected_prev;

reg  last_a_load_regs_exp;
reg [7:0] last_address_down_reg_out_exp;
reg [7:0] last_address_up_reg_out_exp;
reg  last_adress_on_exp;
reg [7:0] last_data_out_exp;
reg [7:0] last_data_reg_out_exp;
reg [1:0] last_estados_c_exp;
reg [1:0] last_funcao_exp;
reg  last_funcao_1_exp;
reg  last_habilita_count_exp;
reg  last_habilita_count2_exp;
reg  last_q_exp;
reg [7:0] last_sw_down_exp;
reg [7:0] last_sw_up_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_load_regs_prev = a_load_regs;
	address_down_reg_out_prev = address_down_reg_out;
	address_up_reg_out_prev = address_up_reg_out;
	adress_on_prev = adress_on;
	data_out_prev = data_out;
	data_reg_out_prev = data_reg_out;
	estados_c_prev = estados_c;
	funcao_prev = funcao;
	funcao_1_prev = funcao_1;
	habilita_count_prev = habilita_count;
	habilita_count2_prev = habilita_count2;
	q_prev = q;
	sw_down_prev = sw_down;
	sw_up_prev = sw_up;
end

// update expected /o prevs

always @(trigger)
begin
	a_load_regs_expected_prev = a_load_regs_expected;
	address_down_reg_out_expected_prev = address_down_reg_out_expected;
	address_up_reg_out_expected_prev = address_up_reg_out_expected;
	adress_on_expected_prev = adress_on_expected;
	data_out_expected_prev = data_out_expected;
	data_reg_out_expected_prev = data_reg_out_expected;
	estados_c_expected_prev = estados_c_expected;
	funcao_expected_prev = funcao_expected;
	funcao_1_expected_prev = funcao_1_expected;
	habilita_count_expected_prev = habilita_count_expected;
	habilita_count2_expected_prev = habilita_count2_expected;
	q_expected_prev = q_expected;
	sw_down_expected_prev = sw_down_expected;
	sw_up_expected_prev = sw_up_expected;
end


// expected funcao[ 1 ]
initial
begin
	funcao_expected[1] = 1'bX;
end 
// expected funcao[ 0 ]
initial
begin
	funcao_expected[0] = 1'bX;
end 
// expected address_down_reg_out[ 7 ]
initial
begin
	address_down_reg_out_expected[7] = 1'bX;
end 
// expected address_down_reg_out[ 6 ]
initial
begin
	address_down_reg_out_expected[6] = 1'bX;
end 
// expected address_down_reg_out[ 5 ]
initial
begin
	address_down_reg_out_expected[5] = 1'bX;
end 
// expected address_down_reg_out[ 4 ]
initial
begin
	address_down_reg_out_expected[4] = 1'bX;
end 
// expected address_down_reg_out[ 3 ]
initial
begin
	address_down_reg_out_expected[3] = 1'bX;
end 
// expected address_down_reg_out[ 2 ]
initial
begin
	address_down_reg_out_expected[2] = 1'bX;
end 
// expected address_down_reg_out[ 1 ]
initial
begin
	address_down_reg_out_expected[1] = 1'bX;
end 
// expected address_down_reg_out[ 0 ]
initial
begin
	address_down_reg_out_expected[0] = 1'bX;
end 
// expected address_up_reg_out[ 7 ]
initial
begin
	address_up_reg_out_expected[7] = 1'bX;
end 
// expected address_up_reg_out[ 6 ]
initial
begin
	address_up_reg_out_expected[6] = 1'bX;
end 
// expected address_up_reg_out[ 5 ]
initial
begin
	address_up_reg_out_expected[5] = 1'bX;
end 
// expected address_up_reg_out[ 4 ]
initial
begin
	address_up_reg_out_expected[4] = 1'bX;
end 
// expected address_up_reg_out[ 3 ]
initial
begin
	address_up_reg_out_expected[3] = 1'bX;
end 
// expected address_up_reg_out[ 2 ]
initial
begin
	address_up_reg_out_expected[2] = 1'bX;
end 
// expected address_up_reg_out[ 1 ]
initial
begin
	address_up_reg_out_expected[1] = 1'bX;
end 
// expected address_up_reg_out[ 0 ]
initial
begin
	address_up_reg_out_expected[0] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 

// expected q
initial
begin
	q_expected = 1'bX;
end 

// expected a_load_regs
initial
begin
	a_load_regs_expected = 1'bX;
end 

// expected adress_on
initial
begin
	adress_on_expected = 1'bX;
end 

// expected funcao_1
initial
begin
	funcao_1_expected = 1'bX;
end 
// expected data_reg_out[ 7 ]
initial
begin
	data_reg_out_expected[7] = 1'bX;
end 
// expected data_reg_out[ 6 ]
initial
begin
	data_reg_out_expected[6] = 1'bX;
end 
// expected data_reg_out[ 5 ]
initial
begin
	data_reg_out_expected[5] = 1'bX;
end 
// expected data_reg_out[ 4 ]
initial
begin
	data_reg_out_expected[4] = 1'bX;
end 
// expected data_reg_out[ 3 ]
initial
begin
	data_reg_out_expected[3] = 1'bX;
end 
// expected data_reg_out[ 2 ]
initial
begin
	data_reg_out_expected[2] = 1'bX;
end 
// expected data_reg_out[ 1 ]
initial
begin
	data_reg_out_expected[1] = 1'bX;
end 
// expected data_reg_out[ 0 ]
initial
begin
	data_reg_out_expected[0] = 1'bX;
end 
// expected sw_down[ 7 ]
initial
begin
	sw_down_expected[7] = 1'bX;
end 
// expected sw_down[ 6 ]
initial
begin
	sw_down_expected[6] = 1'bX;
end 
// expected sw_down[ 5 ]
initial
begin
	sw_down_expected[5] = 1'bX;
end 
// expected sw_down[ 4 ]
initial
begin
	sw_down_expected[4] = 1'bX;
end 
// expected sw_down[ 3 ]
initial
begin
	sw_down_expected[3] = 1'bX;
end 
// expected sw_down[ 2 ]
initial
begin
	sw_down_expected[2] = 1'bX;
end 
// expected sw_down[ 1 ]
initial
begin
	sw_down_expected[1] = 1'bX;
end 
// expected sw_down[ 0 ]
initial
begin
	sw_down_expected[0] = 1'bX;
end 
// expected sw_up[ 7 ]
initial
begin
	sw_up_expected[7] = 1'bX;
end 
// expected sw_up[ 6 ]
initial
begin
	sw_up_expected[6] = 1'bX;
end 
// expected sw_up[ 5 ]
initial
begin
	sw_up_expected[5] = 1'bX;
end 
// expected sw_up[ 4 ]
initial
begin
	sw_up_expected[4] = 1'bX;
end 
// expected sw_up[ 3 ]
initial
begin
	sw_up_expected[3] = 1'bX;
end 
// expected sw_up[ 2 ]
initial
begin
	sw_up_expected[2] = 1'bX;
end 
// expected sw_up[ 1 ]
initial
begin
	sw_up_expected[1] = 1'bX;
end 
// expected sw_up[ 0 ]
initial
begin
	sw_up_expected[0] = 1'bX;
end 
// expected estados_c[ 1 ]
initial
begin
	estados_c_expected[1] = 1'bX;
end 
// expected estados_c[ 0 ]
initial
begin
	estados_c_expected[0] = 1'bX;
end 

// expected habilita_count
initial
begin
	habilita_count_expected = 1'bX;
end 

// expected habilita_count2
initial
begin
	habilita_count2_expected = 1'bX;
end 
// generate trigger
always @(a_load_regs_expected or a_load_regs or address_down_reg_out_expected or address_down_reg_out or address_up_reg_out_expected or address_up_reg_out or adress_on_expected or adress_on or data_out_expected or data_out or data_reg_out_expected or data_reg_out or estados_c_expected or estados_c or funcao_expected or funcao or funcao_1_expected or funcao_1 or habilita_count_expected or habilita_count or habilita_count2_expected or habilita_count2 or q_expected or q or sw_down_expected or sw_down or sw_up_expected or sw_up)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a_load_regs = %b | expected address_down_reg_out = %b | expected address_up_reg_out = %b | expected adress_on = %b | expected data_out = %b | expected data_reg_out = %b | expected estados_c = %b | expected funcao = %b | expected funcao_1 = %b | expected habilita_count = %b | expected habilita_count2 = %b | expected q = %b | expected sw_down = %b | expected sw_up = %b | ",a_load_regs_expected_prev,address_down_reg_out_expected_prev,address_up_reg_out_expected_prev,adress_on_expected_prev,data_out_expected_prev,data_reg_out_expected_prev,estados_c_expected_prev,funcao_expected_prev,funcao_1_expected_prev,habilita_count_expected_prev,habilita_count2_expected_prev,q_expected_prev,sw_down_expected_prev,sw_up_expected_prev);
	$display("| real a_load_regs = %b | real address_down_reg_out = %b | real address_up_reg_out = %b | real adress_on = %b | real data_out = %b | real data_reg_out = %b | real estados_c = %b | real funcao = %b | real funcao_1 = %b | real habilita_count = %b | real habilita_count2 = %b | real q = %b | real sw_down = %b | real sw_up = %b | ",a_load_regs_prev,address_down_reg_out_prev,address_up_reg_out_prev,adress_on_prev,data_out_prev,data_reg_out_prev,estados_c_prev,funcao_prev,funcao_1_prev,habilita_count_prev,habilita_count2_prev,q_prev,sw_down_prev,sw_up_prev);
`endif
	if (
		( a_load_regs_expected_prev !== 1'bx ) && ( a_load_regs_prev !== a_load_regs_expected_prev )
		&& ((a_load_regs_expected_prev !== last_a_load_regs_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a_load_regs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_load_regs_expected_prev);
		$display ("     Real value = %b", a_load_regs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_load_regs_exp = a_load_regs_expected_prev;
	end
	if (
		( address_down_reg_out_expected_prev[0] !== 1'bx ) && ( address_down_reg_out_prev[0] !== address_down_reg_out_expected_prev[0] )
		&& ((address_down_reg_out_expected_prev[0] !== last_address_down_reg_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[0] = address_down_reg_out_expected_prev[0];
	end
	if (
		( address_down_reg_out_expected_prev[1] !== 1'bx ) && ( address_down_reg_out_prev[1] !== address_down_reg_out_expected_prev[1] )
		&& ((address_down_reg_out_expected_prev[1] !== last_address_down_reg_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[1] = address_down_reg_out_expected_prev[1];
	end
	if (
		( address_down_reg_out_expected_prev[2] !== 1'bx ) && ( address_down_reg_out_prev[2] !== address_down_reg_out_expected_prev[2] )
		&& ((address_down_reg_out_expected_prev[2] !== last_address_down_reg_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[2] = address_down_reg_out_expected_prev[2];
	end
	if (
		( address_down_reg_out_expected_prev[3] !== 1'bx ) && ( address_down_reg_out_prev[3] !== address_down_reg_out_expected_prev[3] )
		&& ((address_down_reg_out_expected_prev[3] !== last_address_down_reg_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[3] = address_down_reg_out_expected_prev[3];
	end
	if (
		( address_down_reg_out_expected_prev[4] !== 1'bx ) && ( address_down_reg_out_prev[4] !== address_down_reg_out_expected_prev[4] )
		&& ((address_down_reg_out_expected_prev[4] !== last_address_down_reg_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[4] = address_down_reg_out_expected_prev[4];
	end
	if (
		( address_down_reg_out_expected_prev[5] !== 1'bx ) && ( address_down_reg_out_prev[5] !== address_down_reg_out_expected_prev[5] )
		&& ((address_down_reg_out_expected_prev[5] !== last_address_down_reg_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[5] = address_down_reg_out_expected_prev[5];
	end
	if (
		( address_down_reg_out_expected_prev[6] !== 1'bx ) && ( address_down_reg_out_prev[6] !== address_down_reg_out_expected_prev[6] )
		&& ((address_down_reg_out_expected_prev[6] !== last_address_down_reg_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[6] = address_down_reg_out_expected_prev[6];
	end
	if (
		( address_down_reg_out_expected_prev[7] !== 1'bx ) && ( address_down_reg_out_prev[7] !== address_down_reg_out_expected_prev[7] )
		&& ((address_down_reg_out_expected_prev[7] !== last_address_down_reg_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_down_reg_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_down_reg_out_expected_prev);
		$display ("     Real value = %b", address_down_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_down_reg_out_exp[7] = address_down_reg_out_expected_prev[7];
	end
	if (
		( address_up_reg_out_expected_prev[0] !== 1'bx ) && ( address_up_reg_out_prev[0] !== address_up_reg_out_expected_prev[0] )
		&& ((address_up_reg_out_expected_prev[0] !== last_address_up_reg_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[0] = address_up_reg_out_expected_prev[0];
	end
	if (
		( address_up_reg_out_expected_prev[1] !== 1'bx ) && ( address_up_reg_out_prev[1] !== address_up_reg_out_expected_prev[1] )
		&& ((address_up_reg_out_expected_prev[1] !== last_address_up_reg_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[1] = address_up_reg_out_expected_prev[1];
	end
	if (
		( address_up_reg_out_expected_prev[2] !== 1'bx ) && ( address_up_reg_out_prev[2] !== address_up_reg_out_expected_prev[2] )
		&& ((address_up_reg_out_expected_prev[2] !== last_address_up_reg_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[2] = address_up_reg_out_expected_prev[2];
	end
	if (
		( address_up_reg_out_expected_prev[3] !== 1'bx ) && ( address_up_reg_out_prev[3] !== address_up_reg_out_expected_prev[3] )
		&& ((address_up_reg_out_expected_prev[3] !== last_address_up_reg_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[3] = address_up_reg_out_expected_prev[3];
	end
	if (
		( address_up_reg_out_expected_prev[4] !== 1'bx ) && ( address_up_reg_out_prev[4] !== address_up_reg_out_expected_prev[4] )
		&& ((address_up_reg_out_expected_prev[4] !== last_address_up_reg_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[4] = address_up_reg_out_expected_prev[4];
	end
	if (
		( address_up_reg_out_expected_prev[5] !== 1'bx ) && ( address_up_reg_out_prev[5] !== address_up_reg_out_expected_prev[5] )
		&& ((address_up_reg_out_expected_prev[5] !== last_address_up_reg_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[5] = address_up_reg_out_expected_prev[5];
	end
	if (
		( address_up_reg_out_expected_prev[6] !== 1'bx ) && ( address_up_reg_out_prev[6] !== address_up_reg_out_expected_prev[6] )
		&& ((address_up_reg_out_expected_prev[6] !== last_address_up_reg_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[6] = address_up_reg_out_expected_prev[6];
	end
	if (
		( address_up_reg_out_expected_prev[7] !== 1'bx ) && ( address_up_reg_out_prev[7] !== address_up_reg_out_expected_prev[7] )
		&& ((address_up_reg_out_expected_prev[7] !== last_address_up_reg_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_up_reg_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_up_reg_out_expected_prev);
		$display ("     Real value = %b", address_up_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_address_up_reg_out_exp[7] = address_up_reg_out_expected_prev[7];
	end
	if (
		( adress_on_expected_prev !== 1'bx ) && ( adress_on_prev !== adress_on_expected_prev )
		&& ((adress_on_expected_prev !== last_adress_on_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port adress_on :: @time = %t",  $realtime);
		$display ("     Expected value = %b", adress_on_expected_prev);
		$display ("     Real value = %b", adress_on_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_adress_on_exp = adress_on_expected_prev;
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_reg_out_expected_prev[0] !== 1'bx ) && ( data_reg_out_prev[0] !== data_reg_out_expected_prev[0] )
		&& ((data_reg_out_expected_prev[0] !== last_data_reg_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[0] = data_reg_out_expected_prev[0];
	end
	if (
		( data_reg_out_expected_prev[1] !== 1'bx ) && ( data_reg_out_prev[1] !== data_reg_out_expected_prev[1] )
		&& ((data_reg_out_expected_prev[1] !== last_data_reg_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[1] = data_reg_out_expected_prev[1];
	end
	if (
		( data_reg_out_expected_prev[2] !== 1'bx ) && ( data_reg_out_prev[2] !== data_reg_out_expected_prev[2] )
		&& ((data_reg_out_expected_prev[2] !== last_data_reg_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[2] = data_reg_out_expected_prev[2];
	end
	if (
		( data_reg_out_expected_prev[3] !== 1'bx ) && ( data_reg_out_prev[3] !== data_reg_out_expected_prev[3] )
		&& ((data_reg_out_expected_prev[3] !== last_data_reg_out_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[3] = data_reg_out_expected_prev[3];
	end
	if (
		( data_reg_out_expected_prev[4] !== 1'bx ) && ( data_reg_out_prev[4] !== data_reg_out_expected_prev[4] )
		&& ((data_reg_out_expected_prev[4] !== last_data_reg_out_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[4] = data_reg_out_expected_prev[4];
	end
	if (
		( data_reg_out_expected_prev[5] !== 1'bx ) && ( data_reg_out_prev[5] !== data_reg_out_expected_prev[5] )
		&& ((data_reg_out_expected_prev[5] !== last_data_reg_out_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[5] = data_reg_out_expected_prev[5];
	end
	if (
		( data_reg_out_expected_prev[6] !== 1'bx ) && ( data_reg_out_prev[6] !== data_reg_out_expected_prev[6] )
		&& ((data_reg_out_expected_prev[6] !== last_data_reg_out_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[6] = data_reg_out_expected_prev[6];
	end
	if (
		( data_reg_out_expected_prev[7] !== 1'bx ) && ( data_reg_out_prev[7] !== data_reg_out_expected_prev[7] )
		&& ((data_reg_out_expected_prev[7] !== last_data_reg_out_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_data_reg_out_exp[7] = data_reg_out_expected_prev[7];
	end
	if (
		( estados_c_expected_prev[0] !== 1'bx ) && ( estados_c_prev[0] !== estados_c_expected_prev[0] )
		&& ((estados_c_expected_prev[0] !== last_estados_c_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados_c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_c_expected_prev);
		$display ("     Real value = %b", estados_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estados_c_exp[0] = estados_c_expected_prev[0];
	end
	if (
		( estados_c_expected_prev[1] !== 1'bx ) && ( estados_c_prev[1] !== estados_c_expected_prev[1] )
		&& ((estados_c_expected_prev[1] !== last_estados_c_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados_c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_c_expected_prev);
		$display ("     Real value = %b", estados_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_estados_c_exp[1] = estados_c_expected_prev[1];
	end
	if (
		( funcao_expected_prev[0] !== 1'bx ) && ( funcao_prev[0] !== funcao_expected_prev[0] )
		&& ((funcao_expected_prev[0] !== last_funcao_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funcao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funcao_expected_prev);
		$display ("     Real value = %b", funcao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_funcao_exp[0] = funcao_expected_prev[0];
	end
	if (
		( funcao_expected_prev[1] !== 1'bx ) && ( funcao_prev[1] !== funcao_expected_prev[1] )
		&& ((funcao_expected_prev[1] !== last_funcao_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funcao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funcao_expected_prev);
		$display ("     Real value = %b", funcao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_funcao_exp[1] = funcao_expected_prev[1];
	end
	if (
		( funcao_1_expected_prev !== 1'bx ) && ( funcao_1_prev !== funcao_1_expected_prev )
		&& ((funcao_1_expected_prev !== last_funcao_1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funcao_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funcao_1_expected_prev);
		$display ("     Real value = %b", funcao_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_funcao_1_exp = funcao_1_expected_prev;
	end
	if (
		( habilita_count_expected_prev !== 1'bx ) && ( habilita_count_prev !== habilita_count_expected_prev )
		&& ((habilita_count_expected_prev !== last_habilita_count_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habilita_count :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habilita_count_expected_prev);
		$display ("     Real value = %b", habilita_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_habilita_count_exp = habilita_count_expected_prev;
	end
	if (
		( habilita_count2_expected_prev !== 1'bx ) && ( habilita_count2_prev !== habilita_count2_expected_prev )
		&& ((habilita_count2_expected_prev !== last_habilita_count2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habilita_count2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habilita_count2_expected_prev);
		$display ("     Real value = %b", habilita_count2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_habilita_count2_exp = habilita_count2_expected_prev;
	end
	if (
		( q_expected_prev !== 1'bx ) && ( q_prev !== q_expected_prev )
		&& ((q_expected_prev !== last_q_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_q_exp = q_expected_prev;
	end
	if (
		( sw_down_expected_prev[0] !== 1'bx ) && ( sw_down_prev[0] !== sw_down_expected_prev[0] )
		&& ((sw_down_expected_prev[0] !== last_sw_down_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[0] = sw_down_expected_prev[0];
	end
	if (
		( sw_down_expected_prev[1] !== 1'bx ) && ( sw_down_prev[1] !== sw_down_expected_prev[1] )
		&& ((sw_down_expected_prev[1] !== last_sw_down_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[1] = sw_down_expected_prev[1];
	end
	if (
		( sw_down_expected_prev[2] !== 1'bx ) && ( sw_down_prev[2] !== sw_down_expected_prev[2] )
		&& ((sw_down_expected_prev[2] !== last_sw_down_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[2] = sw_down_expected_prev[2];
	end
	if (
		( sw_down_expected_prev[3] !== 1'bx ) && ( sw_down_prev[3] !== sw_down_expected_prev[3] )
		&& ((sw_down_expected_prev[3] !== last_sw_down_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[3] = sw_down_expected_prev[3];
	end
	if (
		( sw_down_expected_prev[4] !== 1'bx ) && ( sw_down_prev[4] !== sw_down_expected_prev[4] )
		&& ((sw_down_expected_prev[4] !== last_sw_down_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[4] = sw_down_expected_prev[4];
	end
	if (
		( sw_down_expected_prev[5] !== 1'bx ) && ( sw_down_prev[5] !== sw_down_expected_prev[5] )
		&& ((sw_down_expected_prev[5] !== last_sw_down_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[5] = sw_down_expected_prev[5];
	end
	if (
		( sw_down_expected_prev[6] !== 1'bx ) && ( sw_down_prev[6] !== sw_down_expected_prev[6] )
		&& ((sw_down_expected_prev[6] !== last_sw_down_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[6] = sw_down_expected_prev[6];
	end
	if (
		( sw_down_expected_prev[7] !== 1'bx ) && ( sw_down_prev[7] !== sw_down_expected_prev[7] )
		&& ((sw_down_expected_prev[7] !== last_sw_down_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_down[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_down_expected_prev);
		$display ("     Real value = %b", sw_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_sw_down_exp[7] = sw_down_expected_prev[7];
	end
	if (
		( sw_up_expected_prev[0] !== 1'bx ) && ( sw_up_prev[0] !== sw_up_expected_prev[0] )
		&& ((sw_up_expected_prev[0] !== last_sw_up_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[0] = sw_up_expected_prev[0];
	end
	if (
		( sw_up_expected_prev[1] !== 1'bx ) && ( sw_up_prev[1] !== sw_up_expected_prev[1] )
		&& ((sw_up_expected_prev[1] !== last_sw_up_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[1] = sw_up_expected_prev[1];
	end
	if (
		( sw_up_expected_prev[2] !== 1'bx ) && ( sw_up_prev[2] !== sw_up_expected_prev[2] )
		&& ((sw_up_expected_prev[2] !== last_sw_up_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[2] = sw_up_expected_prev[2];
	end
	if (
		( sw_up_expected_prev[3] !== 1'bx ) && ( sw_up_prev[3] !== sw_up_expected_prev[3] )
		&& ((sw_up_expected_prev[3] !== last_sw_up_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[3] = sw_up_expected_prev[3];
	end
	if (
		( sw_up_expected_prev[4] !== 1'bx ) && ( sw_up_prev[4] !== sw_up_expected_prev[4] )
		&& ((sw_up_expected_prev[4] !== last_sw_up_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[4] = sw_up_expected_prev[4];
	end
	if (
		( sw_up_expected_prev[5] !== 1'bx ) && ( sw_up_prev[5] !== sw_up_expected_prev[5] )
		&& ((sw_up_expected_prev[5] !== last_sw_up_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[5] = sw_up_expected_prev[5];
	end
	if (
		( sw_up_expected_prev[6] !== 1'bx ) && ( sw_up_prev[6] !== sw_up_expected_prev[6] )
		&& ((sw_up_expected_prev[6] !== last_sw_up_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[6] = sw_up_expected_prev[6];
	end
	if (
		( sw_up_expected_prev[7] !== 1'bx ) && ( sw_up_prev[7] !== sw_up_expected_prev[7] )
		&& ((sw_up_expected_prev[7] !== last_sw_up_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw_up[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_up_expected_prev);
		$display ("     Real value = %b", sw_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_sw_up_exp[7] = sw_up_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trabalhofinalfinal__vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg confirma_DA;
reg confirma_funcao;
reg sw0;
reg sw1;
reg sw2;
reg sw3;
reg sw4;
reg sw5;
reg sw6;
reg sw7;
reg sw8;
reg sw9;
reg troca_funcao;
// wires                                               
wire a_load_regs;
wire [7:0] address_down_reg_out;
wire [7:0] address_up_reg_out;
wire adress_on;
wire [7:0] data_out;
wire [7:0] data_reg_out;
wire [1:0] estados_c;
wire [1:0] funcao;
wire funcao_1;
wire habilita_count;
wire habilita_count2;
wire q;
wire [7:0] sw_down;
wire [7:0] sw_up;

wire sampler;                             

// assign statements (if any)                          
trabalhofinalfinal_ i1 (
// port map - connection between master ports and signals/registers   
	.a_load_regs(a_load_regs),
	.address_down_reg_out(address_down_reg_out),
	.address_up_reg_out(address_up_reg_out),
	.adress_on(adress_on),
	.clock(clock),
	.confirma_DA(confirma_DA),
	.confirma_funcao(confirma_funcao),
	.data_out(data_out),
	.data_reg_out(data_reg_out),
	.estados_c(estados_c),
	.funcao(funcao),
	.funcao_1(funcao_1),
	.habilita_count(habilita_count),
	.habilita_count2(habilita_count2),
	.q(q),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.sw_down(sw_down),
	.sw_up(sw_up),
	.troca_funcao(troca_funcao)
);

// sw9
initial
begin
	sw9 = 1'b1;
	sw9 = #90000 1'b0;
	sw9 = #70000 1'b1;
	sw9 = #40000 1'b0;
	sw9 = #20000 1'b1;
	sw9 = #80000 1'b0;
	sw9 = #740000 1'b1;
	sw9 = #40000 1'b0;
end 

// sw8
initial
begin
	sw8 = 1'b1;
	sw8 = #90000 1'b0;
	sw8 = #70000 1'b1;
	sw8 = #40000 1'b0;
	sw8 = #20000 1'b1;
	sw8 = #80000 1'b0;
	sw8 = #740000 1'b1;
	sw8 = #40000 1'b0;
end 

// sw7
initial
begin
	sw7 = 1'b1;
	sw7 = #90000 1'b0;
	sw7 = #70000 1'b1;
	sw7 = #40000 1'b0;
	sw7 = #20000 1'b1;
	sw7 = #80000 1'b0;
end 

// sw6
initial
begin
	sw6 = 1'b0;
end 

// sw5
initial
begin
	sw5 = 1'b1;
	sw5 = #90000 1'b0;
	sw5 = #70000 1'b1;
	sw5 = #40000 1'b0;
	sw5 = #20000 1'b1;
	sw5 = #80000 1'b0;
end 

// sw4
initial
begin
	sw4 = 1'b1;
	sw4 = #90000 1'b0;
	sw4 = #70000 1'b1;
	sw4 = #40000 1'b0;
	sw4 = #20000 1'b1;
	sw4 = #80000 1'b0;
end 

// sw3
initial
begin
	sw3 = 1'b1;
	sw3 = #90000 1'b0;
	sw3 = #70000 1'b1;
	sw3 = #40000 1'b0;
	sw3 = #20000 1'b1;
	sw3 = #320000 1'b0;
	sw3 = #90000 1'b1;
	sw3 = #80000 1'b0;
end 

// sw2
initial
begin
	sw2 = 1'b0;
	sw2 = #220000 1'b1;
	sw2 = #320000 1'b0;
	sw2 = #90000 1'b1;
	sw2 = #80000 1'b0;
end 

// sw1
initial
begin
	sw1 = 1'b1;
	sw1 = #200000 1'b0;
	sw1 = #100000 1'b1;
	sw1 = #280000 1'b0;
	sw1 = #50000 1'b1;
	sw1 = #80000 1'b0;
	sw1 = #330000 1'b1;
	sw1 = #40000 1'b0;
end 

// sw0
initial
begin
	sw0 = 1'b0;
	sw0 = #300000 1'b1;
	sw0 = #240000 1'b0;
	sw0 = #90000 1'b1;
	sw0 = #80000 1'b0;
end 

// clock
initial
begin
	repeat(285)
	begin
		clock = 1'b0;
		clock = #7000 1'b1;
		# 7000;
	end
	clock = 1'b0;
	clock = #7000 1'b1;
end 

// confirma_DA
initial
begin
	confirma_DA = 1'b0;
	confirma_DA = #40000 1'b1;
	confirma_DA = #40000 1'b0;
	confirma_DA = #30000 1'b1;
	confirma_DA = #30000 1'b0;
	confirma_DA = #100000 1'b1;
	confirma_DA = #30000 1'b0;
	confirma_DA = #40000 1'b1;
	confirma_DA = #30000 1'b0;
	confirma_DA = #200000 1'b1;
	confirma_DA = #20000 1'b0;
	confirma_DA = #120000 1'b1;
	confirma_DA = #20000 1'b0;
	confirma_DA = #350000 1'b1;
	confirma_DA = #20000 1'b0;
end 

// confirma_funcao
initial
begin
	confirma_funcao = 1'b0;
	confirma_funcao = #150000 1'b1;
	confirma_funcao = #20000 1'b0;
	confirma_funcao = #30000 1'b1;
	confirma_funcao = #20000 1'b0;
	confirma_funcao = #130000 1'b1;
	confirma_funcao = #50000 1'b0;
	confirma_funcao = #20000 1'b1;
	confirma_funcao = #40000 1'b0;
	confirma_funcao = #20000 1'b1;
	confirma_funcao = #20000 1'b0;
	confirma_funcao = #80000 1'b1;
	confirma_funcao = #30000 1'b0;
	confirma_funcao = #20000 1'b1;
	confirma_funcao = #40000 1'b0;
	confirma_funcao = #40000 1'b1;
	confirma_funcao = #40000 1'b0;
	confirma_funcao = #30000 1'b1;
	confirma_funcao = #60000 1'b0;
end 

// troca_funcao
initial
begin
	troca_funcao = 1'b0;
	troca_funcao = #20000 1'b1;
	troca_funcao = #60000 1'b0;
	troca_funcao = #440000 1'b1;
	troca_funcao = #160000 1'b0;
	troca_funcao = #280000 1'b1;
	troca_funcao = #120000 1'b0;
end 

trabalhofinalfinal__vlg_sample_tst tb_sample (
	.clock(clock),
	.confirma_DA(confirma_DA),
	.confirma_funcao(confirma_funcao),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.troca_funcao(troca_funcao),
	.sampler_tx(sampler)
);

trabalhofinalfinal__vlg_check_tst tb_out(
	.a_load_regs(a_load_regs),
	.address_down_reg_out(address_down_reg_out),
	.address_up_reg_out(address_up_reg_out),
	.adress_on(adress_on),
	.data_out(data_out),
	.data_reg_out(data_reg_out),
	.estados_c(estados_c),
	.funcao(funcao),
	.funcao_1(funcao_1),
	.habilita_count(habilita_count),
	.habilita_count2(habilita_count2),
	.q(q),
	.sw_down(sw_down),
	.sw_up(sw_up),
	.sampler_rx(sampler)
);
endmodule

