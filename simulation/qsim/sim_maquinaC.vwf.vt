// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2023 16:58:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MAQUINA_C
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MAQUINA_C_vlg_sample_tst(
	clk,
	confirmaDA,
	confirmaFuncao,
	habilita,
	sampler_tx
);
input  clk;
input  confirmaDA;
input  confirmaFuncao;
input  habilita;
output sampler_tx;

reg sample;
time current_time;
always @(clk or confirmaDA or confirmaFuncao or habilita)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MAQUINA_C_vlg_check_tst (
	C_VISOR_MSG,
	ESTADO,
	habilita_counter,
	LOAD_REG_SWAP_ADDRESS,
	LOAD_REG_SWAP_DATA,
	SWAP_BLZ,
	WRITE_MEM,
	sampler_rx
);
input  C_VISOR_MSG;
input [1:0] ESTADO;
input  habilita_counter;
input  LOAD_REG_SWAP_ADDRESS;
input  LOAD_REG_SWAP_DATA;
input  SWAP_BLZ;
input  WRITE_MEM;
input sampler_rx;

reg  C_VISOR_MSG_expected;
reg [1:0] ESTADO_expected;
reg  habilita_counter_expected;
reg  LOAD_REG_SWAP_ADDRESS_expected;
reg  LOAD_REG_SWAP_DATA_expected;
reg  SWAP_BLZ_expected;
reg  WRITE_MEM_expected;

reg  C_VISOR_MSG_prev;
reg [1:0] ESTADO_prev;
reg  habilita_counter_prev;
reg  LOAD_REG_SWAP_ADDRESS_prev;
reg  LOAD_REG_SWAP_DATA_prev;
reg  SWAP_BLZ_prev;
reg  WRITE_MEM_prev;

reg  C_VISOR_MSG_expected_prev;
reg [1:0] ESTADO_expected_prev;
reg  habilita_counter_expected_prev;
reg  LOAD_REG_SWAP_ADDRESS_expected_prev;
reg  LOAD_REG_SWAP_DATA_expected_prev;
reg  SWAP_BLZ_expected_prev;
reg  WRITE_MEM_expected_prev;

reg  last_C_VISOR_MSG_exp;
reg [1:0] last_ESTADO_exp;
reg  last_habilita_counter_exp;
reg  last_LOAD_REG_SWAP_ADDRESS_exp;
reg  last_LOAD_REG_SWAP_DATA_exp;
reg  last_SWAP_BLZ_exp;
reg  last_WRITE_MEM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_VISOR_MSG_prev = C_VISOR_MSG;
	ESTADO_prev = ESTADO;
	habilita_counter_prev = habilita_counter;
	LOAD_REG_SWAP_ADDRESS_prev = LOAD_REG_SWAP_ADDRESS;
	LOAD_REG_SWAP_DATA_prev = LOAD_REG_SWAP_DATA;
	SWAP_BLZ_prev = SWAP_BLZ;
	WRITE_MEM_prev = WRITE_MEM;
end

// update expected /o prevs

always @(trigger)
begin
	C_VISOR_MSG_expected_prev = C_VISOR_MSG_expected;
	ESTADO_expected_prev = ESTADO_expected;
	habilita_counter_expected_prev = habilita_counter_expected;
	LOAD_REG_SWAP_ADDRESS_expected_prev = LOAD_REG_SWAP_ADDRESS_expected;
	LOAD_REG_SWAP_DATA_expected_prev = LOAD_REG_SWAP_DATA_expected;
	SWAP_BLZ_expected_prev = SWAP_BLZ_expected;
	WRITE_MEM_expected_prev = WRITE_MEM_expected;
end



// expected C_VISOR_MSG
initial
begin
	C_VISOR_MSG_expected = 1'bX;
end 

// expected SWAP_BLZ
initial
begin
	SWAP_BLZ_expected = 1'bX;
end 

// expected LOAD_REG_SWAP_ADDRESS
initial
begin
	LOAD_REG_SWAP_ADDRESS_expected = 1'bX;
end 

// expected LOAD_REG_SWAP_DATA
initial
begin
	LOAD_REG_SWAP_DATA_expected = 1'bX;
end 

// expected WRITE_MEM
initial
begin
	WRITE_MEM_expected = 1'bX;
end 
// expected ESTADO[ 1 ]
initial
begin
	ESTADO_expected[1] = 1'bX;
end 
// expected ESTADO[ 0 ]
initial
begin
	ESTADO_expected[0] = 1'bX;
end 

// expected habilita_counter
initial
begin
	habilita_counter_expected = 1'bX;
end 
// generate trigger
always @(C_VISOR_MSG_expected or C_VISOR_MSG or ESTADO_expected or ESTADO or habilita_counter_expected or habilita_counter or LOAD_REG_SWAP_ADDRESS_expected or LOAD_REG_SWAP_ADDRESS or LOAD_REG_SWAP_DATA_expected or LOAD_REG_SWAP_DATA or SWAP_BLZ_expected or SWAP_BLZ or WRITE_MEM_expected or WRITE_MEM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C_VISOR_MSG = %b | expected ESTADO = %b | expected habilita_counter = %b | expected LOAD_REG_SWAP_ADDRESS = %b | expected LOAD_REG_SWAP_DATA = %b | expected SWAP_BLZ = %b | expected WRITE_MEM = %b | ",C_VISOR_MSG_expected_prev,ESTADO_expected_prev,habilita_counter_expected_prev,LOAD_REG_SWAP_ADDRESS_expected_prev,LOAD_REG_SWAP_DATA_expected_prev,SWAP_BLZ_expected_prev,WRITE_MEM_expected_prev);
	$display("| real C_VISOR_MSG = %b | real ESTADO = %b | real habilita_counter = %b | real LOAD_REG_SWAP_ADDRESS = %b | real LOAD_REG_SWAP_DATA = %b | real SWAP_BLZ = %b | real WRITE_MEM = %b | ",C_VISOR_MSG_prev,ESTADO_prev,habilita_counter_prev,LOAD_REG_SWAP_ADDRESS_prev,LOAD_REG_SWAP_DATA_prev,SWAP_BLZ_prev,WRITE_MEM_prev);
`endif
	if (
		( C_VISOR_MSG_expected_prev !== 1'bx ) && ( C_VISOR_MSG_prev !== C_VISOR_MSG_expected_prev )
		&& ((C_VISOR_MSG_expected_prev !== last_C_VISOR_MSG_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_VISOR_MSG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_VISOR_MSG_expected_prev);
		$display ("     Real value = %b", C_VISOR_MSG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_VISOR_MSG_exp = C_VISOR_MSG_expected_prev;
	end
	if (
		( ESTADO_expected_prev[0] !== 1'bx ) && ( ESTADO_prev[0] !== ESTADO_expected_prev[0] )
		&& ((ESTADO_expected_prev[0] !== last_ESTADO_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADO_expected_prev);
		$display ("     Real value = %b", ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ESTADO_exp[0] = ESTADO_expected_prev[0];
	end
	if (
		( ESTADO_expected_prev[1] !== 1'bx ) && ( ESTADO_prev[1] !== ESTADO_expected_prev[1] )
		&& ((ESTADO_expected_prev[1] !== last_ESTADO_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADO_expected_prev);
		$display ("     Real value = %b", ESTADO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ESTADO_exp[1] = ESTADO_expected_prev[1];
	end
	if (
		( habilita_counter_expected_prev !== 1'bx ) && ( habilita_counter_prev !== habilita_counter_expected_prev )
		&& ((habilita_counter_expected_prev !== last_habilita_counter_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habilita_counter :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habilita_counter_expected_prev);
		$display ("     Real value = %b", habilita_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_habilita_counter_exp = habilita_counter_expected_prev;
	end
	if (
		( LOAD_REG_SWAP_ADDRESS_expected_prev !== 1'bx ) && ( LOAD_REG_SWAP_ADDRESS_prev !== LOAD_REG_SWAP_ADDRESS_expected_prev )
		&& ((LOAD_REG_SWAP_ADDRESS_expected_prev !== last_LOAD_REG_SWAP_ADDRESS_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_REG_SWAP_ADDRESS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_REG_SWAP_ADDRESS_expected_prev);
		$display ("     Real value = %b", LOAD_REG_SWAP_ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LOAD_REG_SWAP_ADDRESS_exp = LOAD_REG_SWAP_ADDRESS_expected_prev;
	end
	if (
		( LOAD_REG_SWAP_DATA_expected_prev !== 1'bx ) && ( LOAD_REG_SWAP_DATA_prev !== LOAD_REG_SWAP_DATA_expected_prev )
		&& ((LOAD_REG_SWAP_DATA_expected_prev !== last_LOAD_REG_SWAP_DATA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOAD_REG_SWAP_DATA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOAD_REG_SWAP_DATA_expected_prev);
		$display ("     Real value = %b", LOAD_REG_SWAP_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LOAD_REG_SWAP_DATA_exp = LOAD_REG_SWAP_DATA_expected_prev;
	end
	if (
		( SWAP_BLZ_expected_prev !== 1'bx ) && ( SWAP_BLZ_prev !== SWAP_BLZ_expected_prev )
		&& ((SWAP_BLZ_expected_prev !== last_SWAP_BLZ_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SWAP_BLZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SWAP_BLZ_expected_prev);
		$display ("     Real value = %b", SWAP_BLZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SWAP_BLZ_exp = SWAP_BLZ_expected_prev;
	end
	if (
		( WRITE_MEM_expected_prev !== 1'bx ) && ( WRITE_MEM_prev !== WRITE_MEM_expected_prev )
		&& ((WRITE_MEM_expected_prev !== last_WRITE_MEM_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WRITE_MEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WRITE_MEM_expected_prev);
		$display ("     Real value = %b", WRITE_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_WRITE_MEM_exp = WRITE_MEM_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MAQUINA_C_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg confirmaDA;
reg confirmaFuncao;
reg habilita;
// wires                                               
wire C_VISOR_MSG;
wire [1:0] ESTADO;
wire habilita_counter;
wire LOAD_REG_SWAP_ADDRESS;
wire LOAD_REG_SWAP_DATA;
wire SWAP_BLZ;
wire WRITE_MEM;

wire sampler;                             

// assign statements (if any)                          
MAQUINA_C i1 (
// port map - connection between master ports and signals/registers   
	.C_VISOR_MSG(C_VISOR_MSG),
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.ESTADO(ESTADO),
	.habilita(habilita),
	.habilita_counter(habilita_counter),
	.LOAD_REG_SWAP_ADDRESS(LOAD_REG_SWAP_ADDRESS),
	.LOAD_REG_SWAP_DATA(LOAD_REG_SWAP_DATA),
	.SWAP_BLZ(SWAP_BLZ),
	.WRITE_MEM(WRITE_MEM)
);

// habilita
initial
begin
	habilita = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// confirmaDA
initial
begin
	confirmaDA = 1'b0;
	confirmaDA = #30000 1'b1;
	confirmaDA = #30000 1'b0;
	confirmaDA = #30000 1'b1;
	confirmaDA = #30000 1'b0;
end 

// confirmaFuncao
initial
begin
	confirmaFuncao = 1'b0;
	confirmaFuncao = #140000 1'b1;
	confirmaFuncao = #110000 1'b0;
	confirmaFuncao = #60000 1'b1;
	confirmaFuncao = #140000 1'b0;
	confirmaFuncao = #60000 1'b1;
	confirmaFuncao = #160000 1'b0;
	confirmaFuncao = #30000 1'b1;
	confirmaFuncao = #150000 1'b0;
	confirmaFuncao = #40000 1'b1;
	confirmaFuncao = #40000 1'b0;
end 

MAQUINA_C_vlg_sample_tst tb_sample (
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.habilita(habilita),
	.sampler_tx(sampler)
);

MAQUINA_C_vlg_check_tst tb_out(
	.C_VISOR_MSG(C_VISOR_MSG),
	.ESTADO(ESTADO),
	.habilita_counter(habilita_counter),
	.LOAD_REG_SWAP_ADDRESS(LOAD_REG_SWAP_ADDRESS),
	.LOAD_REG_SWAP_DATA(LOAD_REG_SWAP_DATA),
	.SWAP_BLZ(SWAP_BLZ),
	.WRITE_MEM(WRITE_MEM),
	.sampler_rx(sampler)
);
endmodule

