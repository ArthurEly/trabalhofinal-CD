// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2023 11:02:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trabalhofinal_swap
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trabalhofinal_swap_vlg_sample_tst(
	clk,
	confirm_sw,
	read,
	sw0,
	sw1,
	sw2,
	sw3,
	sw4,
	sw5,
	sw6,
	sw7,
	sw8,
	sw9,
	write,
	sampler_tx
);
input  clk;
input  confirm_sw;
input  read;
input  sw0;
input  sw1;
input  sw2;
input  sw3;
input  sw4;
input  sw5;
input  sw6;
input  sw7;
input  sw8;
input  sw9;
input  write;
output sampler_tx;

reg sample;
time current_time;
always @(clk or confirm_sw or read or sw0 or sw1 or sw2 or sw3 or sw4 or sw5 or sw6 or sw7 or sw8 or sw9 or write)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trabalhofinal_swap_vlg_check_tst (
	address_reg_out,
	data_out,
	data_reg_out,
	morte,
	sampler_rx
);
input [7:0] address_reg_out;
input [7:0] data_out;
input [7:0] data_reg_out;
input [7:0] morte;
input sampler_rx;

reg [7:0] address_reg_out_expected;
reg [7:0] data_out_expected;
reg [7:0] data_reg_out_expected;
reg [7:0] morte_expected;

reg [7:0] address_reg_out_prev;
reg [7:0] data_out_prev;
reg [7:0] data_reg_out_prev;
reg [7:0] morte_prev;

reg [7:0] address_reg_out_expected_prev;
reg [7:0] data_out_expected_prev;
reg [7:0] data_reg_out_expected_prev;
reg [7:0] morte_expected_prev;

reg [7:0] last_address_reg_out_exp;
reg [7:0] last_data_out_exp;
reg [7:0] last_data_reg_out_exp;
reg [7:0] last_morte_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_reg_out_prev = address_reg_out;
	data_out_prev = data_out;
	data_reg_out_prev = data_reg_out;
	morte_prev = morte;
end

// update expected /o prevs

always @(trigger)
begin
	address_reg_out_expected_prev = address_reg_out_expected;
	data_out_expected_prev = data_out_expected;
	data_reg_out_expected_prev = data_reg_out_expected;
	morte_expected_prev = morte_expected;
end


// expected address_reg_out[ 7 ]
initial
begin
	address_reg_out_expected[7] = 1'bX;
end 
// expected address_reg_out[ 6 ]
initial
begin
	address_reg_out_expected[6] = 1'bX;
end 
// expected address_reg_out[ 5 ]
initial
begin
	address_reg_out_expected[5] = 1'bX;
end 
// expected address_reg_out[ 4 ]
initial
begin
	address_reg_out_expected[4] = 1'bX;
end 
// expected address_reg_out[ 3 ]
initial
begin
	address_reg_out_expected[3] = 1'bX;
end 
// expected address_reg_out[ 2 ]
initial
begin
	address_reg_out_expected[2] = 1'bX;
end 
// expected address_reg_out[ 1 ]
initial
begin
	address_reg_out_expected[1] = 1'bX;
end 
// expected address_reg_out[ 0 ]
initial
begin
	address_reg_out_expected[0] = 1'bX;
end 
// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// expected data_reg_out[ 7 ]
initial
begin
	data_reg_out_expected[7] = 1'bX;
end 
// expected data_reg_out[ 6 ]
initial
begin
	data_reg_out_expected[6] = 1'bX;
end 
// expected data_reg_out[ 5 ]
initial
begin
	data_reg_out_expected[5] = 1'bX;
end 
// expected data_reg_out[ 4 ]
initial
begin
	data_reg_out_expected[4] = 1'bX;
end 
// expected data_reg_out[ 3 ]
initial
begin
	data_reg_out_expected[3] = 1'bX;
end 
// expected data_reg_out[ 2 ]
initial
begin
	data_reg_out_expected[2] = 1'bX;
end 
// expected data_reg_out[ 1 ]
initial
begin
	data_reg_out_expected[1] = 1'bX;
end 
// expected data_reg_out[ 0 ]
initial
begin
	data_reg_out_expected[0] = 1'bX;
end 
// expected morte[ 7 ]
initial
begin
	morte_expected[7] = 1'bX;
end 
// expected morte[ 6 ]
initial
begin
	morte_expected[6] = 1'bX;
end 
// expected morte[ 5 ]
initial
begin
	morte_expected[5] = 1'bX;
end 
// expected morte[ 4 ]
initial
begin
	morte_expected[4] = 1'bX;
end 
// expected morte[ 3 ]
initial
begin
	morte_expected[3] = 1'bX;
end 
// expected morte[ 2 ]
initial
begin
	morte_expected[2] = 1'bX;
end 
// expected morte[ 1 ]
initial
begin
	morte_expected[1] = 1'bX;
end 
// expected morte[ 0 ]
initial
begin
	morte_expected[0] = 1'bX;
end 
// generate trigger
always @(address_reg_out_expected or address_reg_out or data_out_expected or data_out or data_reg_out_expected or data_reg_out or morte_expected or morte)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address_reg_out = %b | expected data_out = %b | expected data_reg_out = %b | expected morte = %b | ",address_reg_out_expected_prev,data_out_expected_prev,data_reg_out_expected_prev,morte_expected_prev);
	$display("| real address_reg_out = %b | real data_out = %b | real data_reg_out = %b | real morte = %b | ",address_reg_out_prev,data_out_prev,data_reg_out_prev,morte_prev);
`endif
	if (
		( address_reg_out_expected_prev[0] !== 1'bx ) && ( address_reg_out_prev[0] !== address_reg_out_expected_prev[0] )
		&& ((address_reg_out_expected_prev[0] !== last_address_reg_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[0] = address_reg_out_expected_prev[0];
	end
	if (
		( address_reg_out_expected_prev[1] !== 1'bx ) && ( address_reg_out_prev[1] !== address_reg_out_expected_prev[1] )
		&& ((address_reg_out_expected_prev[1] !== last_address_reg_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[1] = address_reg_out_expected_prev[1];
	end
	if (
		( address_reg_out_expected_prev[2] !== 1'bx ) && ( address_reg_out_prev[2] !== address_reg_out_expected_prev[2] )
		&& ((address_reg_out_expected_prev[2] !== last_address_reg_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[2] = address_reg_out_expected_prev[2];
	end
	if (
		( address_reg_out_expected_prev[3] !== 1'bx ) && ( address_reg_out_prev[3] !== address_reg_out_expected_prev[3] )
		&& ((address_reg_out_expected_prev[3] !== last_address_reg_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[3] = address_reg_out_expected_prev[3];
	end
	if (
		( address_reg_out_expected_prev[4] !== 1'bx ) && ( address_reg_out_prev[4] !== address_reg_out_expected_prev[4] )
		&& ((address_reg_out_expected_prev[4] !== last_address_reg_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[4] = address_reg_out_expected_prev[4];
	end
	if (
		( address_reg_out_expected_prev[5] !== 1'bx ) && ( address_reg_out_prev[5] !== address_reg_out_expected_prev[5] )
		&& ((address_reg_out_expected_prev[5] !== last_address_reg_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[5] = address_reg_out_expected_prev[5];
	end
	if (
		( address_reg_out_expected_prev[6] !== 1'bx ) && ( address_reg_out_prev[6] !== address_reg_out_expected_prev[6] )
		&& ((address_reg_out_expected_prev[6] !== last_address_reg_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[6] = address_reg_out_expected_prev[6];
	end
	if (
		( address_reg_out_expected_prev[7] !== 1'bx ) && ( address_reg_out_prev[7] !== address_reg_out_expected_prev[7] )
		&& ((address_reg_out_expected_prev[7] !== last_address_reg_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_reg_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_reg_out_expected_prev);
		$display ("     Real value = %b", address_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_reg_out_exp[7] = address_reg_out_expected_prev[7];
	end
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( data_reg_out_expected_prev[0] !== 1'bx ) && ( data_reg_out_prev[0] !== data_reg_out_expected_prev[0] )
		&& ((data_reg_out_expected_prev[0] !== last_data_reg_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[0] = data_reg_out_expected_prev[0];
	end
	if (
		( data_reg_out_expected_prev[1] !== 1'bx ) && ( data_reg_out_prev[1] !== data_reg_out_expected_prev[1] )
		&& ((data_reg_out_expected_prev[1] !== last_data_reg_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[1] = data_reg_out_expected_prev[1];
	end
	if (
		( data_reg_out_expected_prev[2] !== 1'bx ) && ( data_reg_out_prev[2] !== data_reg_out_expected_prev[2] )
		&& ((data_reg_out_expected_prev[2] !== last_data_reg_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[2] = data_reg_out_expected_prev[2];
	end
	if (
		( data_reg_out_expected_prev[3] !== 1'bx ) && ( data_reg_out_prev[3] !== data_reg_out_expected_prev[3] )
		&& ((data_reg_out_expected_prev[3] !== last_data_reg_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[3] = data_reg_out_expected_prev[3];
	end
	if (
		( data_reg_out_expected_prev[4] !== 1'bx ) && ( data_reg_out_prev[4] !== data_reg_out_expected_prev[4] )
		&& ((data_reg_out_expected_prev[4] !== last_data_reg_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[4] = data_reg_out_expected_prev[4];
	end
	if (
		( data_reg_out_expected_prev[5] !== 1'bx ) && ( data_reg_out_prev[5] !== data_reg_out_expected_prev[5] )
		&& ((data_reg_out_expected_prev[5] !== last_data_reg_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[5] = data_reg_out_expected_prev[5];
	end
	if (
		( data_reg_out_expected_prev[6] !== 1'bx ) && ( data_reg_out_prev[6] !== data_reg_out_expected_prev[6] )
		&& ((data_reg_out_expected_prev[6] !== last_data_reg_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[6] = data_reg_out_expected_prev[6];
	end
	if (
		( data_reg_out_expected_prev[7] !== 1'bx ) && ( data_reg_out_prev[7] !== data_reg_out_expected_prev[7] )
		&& ((data_reg_out_expected_prev[7] !== last_data_reg_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_reg_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_reg_out_expected_prev);
		$display ("     Real value = %b", data_reg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_data_reg_out_exp[7] = data_reg_out_expected_prev[7];
	end
	if (
		( morte_expected_prev[0] !== 1'bx ) && ( morte_prev[0] !== morte_expected_prev[0] )
		&& ((morte_expected_prev[0] !== last_morte_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[0] = morte_expected_prev[0];
	end
	if (
		( morte_expected_prev[1] !== 1'bx ) && ( morte_prev[1] !== morte_expected_prev[1] )
		&& ((morte_expected_prev[1] !== last_morte_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[1] = morte_expected_prev[1];
	end
	if (
		( morte_expected_prev[2] !== 1'bx ) && ( morte_prev[2] !== morte_expected_prev[2] )
		&& ((morte_expected_prev[2] !== last_morte_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[2] = morte_expected_prev[2];
	end
	if (
		( morte_expected_prev[3] !== 1'bx ) && ( morte_prev[3] !== morte_expected_prev[3] )
		&& ((morte_expected_prev[3] !== last_morte_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[3] = morte_expected_prev[3];
	end
	if (
		( morte_expected_prev[4] !== 1'bx ) && ( morte_prev[4] !== morte_expected_prev[4] )
		&& ((morte_expected_prev[4] !== last_morte_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[4] = morte_expected_prev[4];
	end
	if (
		( morte_expected_prev[5] !== 1'bx ) && ( morte_prev[5] !== morte_expected_prev[5] )
		&& ((morte_expected_prev[5] !== last_morte_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[5] = morte_expected_prev[5];
	end
	if (
		( morte_expected_prev[6] !== 1'bx ) && ( morte_prev[6] !== morte_expected_prev[6] )
		&& ((morte_expected_prev[6] !== last_morte_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[6] = morte_expected_prev[6];
	end
	if (
		( morte_expected_prev[7] !== 1'bx ) && ( morte_prev[7] !== morte_expected_prev[7] )
		&& ((morte_expected_prev[7] !== last_morte_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port morte[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", morte_expected_prev);
		$display ("     Real value = %b", morte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_morte_exp[7] = morte_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trabalhofinal_swap_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg confirm_sw;
reg read;
reg sw0;
reg sw1;
reg sw2;
reg sw3;
reg sw4;
reg sw5;
reg sw6;
reg sw7;
reg sw8;
reg sw9;
reg write;
// wires                                               
wire [7:0] address_reg_out;
wire [7:0] data_out;
wire [7:0] data_reg_out;
wire [7:0] morte;

wire sampler;                             

// assign statements (if any)                          
trabalhofinal_swap i1 (
// port map - connection between master ports and signals/registers   
	.address_reg_out(address_reg_out),
	.clk(clk),
	.confirm_sw(confirm_sw),
	.data_out(data_out),
	.data_reg_out(data_reg_out),
	.morte(morte),
	.read(read),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.write(write)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// sw0
initial
begin
	sw0 = 1'b0;
end 

// sw1
initial
begin
	sw1 = 1'b1;
end 

// sw2
initial
begin
	sw2 = 1'b0;
end 

// sw3
initial
begin
	sw3 = 1'b0;
end 

// sw4
initial
begin
	sw4 = 1'b1;
end 

// sw5
initial
begin
	sw5 = 1'b1;
end 

// sw6
initial
begin
	sw6 = 1'b1;
end 

// sw7
initial
begin
	sw7 = 1'b0;
end 

// sw8
initial
begin
	sw8 = 1'b1;
end 

// sw9
initial
begin
	sw9 = 1'b1;
end 

// write
initial
begin
	repeat(4)
	begin
		write = 1'b0;
		write = #120000 1'b1;
		# 120000;
	end
	write = 1'b0;
end 

// read
initial
begin
	repeat(2)
	begin
		read = 1'b0;
		read = #240000 1'b1;
		# 240000;
	end
	read = 1'b0;
end 

// confirm_sw
initial
begin
	repeat(4)
	begin
		confirm_sw = 1'b0;
		confirm_sw = #120000 1'b1;
		# 120000;
	end
	confirm_sw = 1'b0;
end 

trabalhofinal_swap_vlg_sample_tst tb_sample (
	.clk(clk),
	.confirm_sw(confirm_sw),
	.read(read),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.write(write),
	.sampler_tx(sampler)
);

trabalhofinal_swap_vlg_check_tst tb_out(
	.address_reg_out(address_reg_out),
	.data_out(data_out),
	.data_reg_out(data_reg_out),
	.morte(morte),
	.sampler_rx(sampler)
);
endmodule

