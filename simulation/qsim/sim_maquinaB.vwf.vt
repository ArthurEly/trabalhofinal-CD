// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2023 15:46:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MAQUINA_B
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MAQUINA_B_vlg_sample_tst(
	clk,
	confirmaDA,
	confirmaFuncao,
	habilita,
	sampler_tx
);
input  clk;
input  confirmaDA;
input  confirmaFuncao;
input  habilita;
output sampler_tx;

reg sample;
time current_time;
always @(clk or confirmaDA or confirmaFuncao or habilita)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MAQUINA_B_vlg_check_tst (
	B_LOAD_REG,
	B_VISOR_MSG,
	B_VISOR_OK,
	estado,
	habilita_count,
	READ_MEM,
	sampler_rx
);
input  B_LOAD_REG;
input  B_VISOR_MSG;
input  B_VISOR_OK;
input  estado;
input  habilita_count;
input  READ_MEM;
input sampler_rx;

reg  B_LOAD_REG_expected;
reg  B_VISOR_MSG_expected;
reg  B_VISOR_OK_expected;
reg  estado_expected;
reg  habilita_count_expected;
reg  READ_MEM_expected;

reg  B_LOAD_REG_prev;
reg  B_VISOR_MSG_prev;
reg  B_VISOR_OK_prev;
reg  estado_prev;
reg  habilita_count_prev;
reg  READ_MEM_prev;

reg  B_LOAD_REG_expected_prev;
reg  B_VISOR_MSG_expected_prev;
reg  B_VISOR_OK_expected_prev;
reg  estado_expected_prev;
reg  habilita_count_expected_prev;
reg  READ_MEM_expected_prev;

reg  last_B_LOAD_REG_exp;
reg  last_B_VISOR_MSG_exp;
reg  last_B_VISOR_OK_exp;
reg  last_estado_exp;
reg  last_habilita_count_exp;
reg  last_READ_MEM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	B_LOAD_REG_prev = B_LOAD_REG;
	B_VISOR_MSG_prev = B_VISOR_MSG;
	B_VISOR_OK_prev = B_VISOR_OK;
	estado_prev = estado;
	habilita_count_prev = habilita_count;
	READ_MEM_prev = READ_MEM;
end

// update expected /o prevs

always @(trigger)
begin
	B_LOAD_REG_expected_prev = B_LOAD_REG_expected;
	B_VISOR_MSG_expected_prev = B_VISOR_MSG_expected;
	B_VISOR_OK_expected_prev = B_VISOR_OK_expected;
	estado_expected_prev = estado_expected;
	habilita_count_expected_prev = habilita_count_expected;
	READ_MEM_expected_prev = READ_MEM_expected;
end



// expected B_LOAD_REG
initial
begin
	B_LOAD_REG_expected = 1'bX;
end 

// expected B_VISOR_MSG
initial
begin
	B_VISOR_MSG_expected = 1'bX;
end 

// expected B_VISOR_OK
initial
begin
	B_VISOR_OK_expected = 1'bX;
end 

// expected READ_MEM
initial
begin
	READ_MEM_expected = 1'bX;
end 

// expected habilita_count
initial
begin
	habilita_count_expected = 1'bX;
end 

// expected estado
initial
begin
	estado_expected = 1'bX;
end 
// generate trigger
always @(B_LOAD_REG_expected or B_LOAD_REG or B_VISOR_MSG_expected or B_VISOR_MSG or B_VISOR_OK_expected or B_VISOR_OK or estado_expected or estado or habilita_count_expected or habilita_count or READ_MEM_expected or READ_MEM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected B_LOAD_REG = %b | expected B_VISOR_MSG = %b | expected B_VISOR_OK = %b | expected estado = %b | expected habilita_count = %b | expected READ_MEM = %b | ",B_LOAD_REG_expected_prev,B_VISOR_MSG_expected_prev,B_VISOR_OK_expected_prev,estado_expected_prev,habilita_count_expected_prev,READ_MEM_expected_prev);
	$display("| real B_LOAD_REG = %b | real B_VISOR_MSG = %b | real B_VISOR_OK = %b | real estado = %b | real habilita_count = %b | real READ_MEM = %b | ",B_LOAD_REG_prev,B_VISOR_MSG_prev,B_VISOR_OK_prev,estado_prev,habilita_count_prev,READ_MEM_prev);
`endif
	if (
		( B_LOAD_REG_expected_prev !== 1'bx ) && ( B_LOAD_REG_prev !== B_LOAD_REG_expected_prev )
		&& ((B_LOAD_REG_expected_prev !== last_B_LOAD_REG_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_LOAD_REG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_LOAD_REG_expected_prev);
		$display ("     Real value = %b", B_LOAD_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_B_LOAD_REG_exp = B_LOAD_REG_expected_prev;
	end
	if (
		( B_VISOR_MSG_expected_prev !== 1'bx ) && ( B_VISOR_MSG_prev !== B_VISOR_MSG_expected_prev )
		&& ((B_VISOR_MSG_expected_prev !== last_B_VISOR_MSG_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_VISOR_MSG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_VISOR_MSG_expected_prev);
		$display ("     Real value = %b", B_VISOR_MSG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_VISOR_MSG_exp = B_VISOR_MSG_expected_prev;
	end
	if (
		( B_VISOR_OK_expected_prev !== 1'bx ) && ( B_VISOR_OK_prev !== B_VISOR_OK_expected_prev )
		&& ((B_VISOR_OK_expected_prev !== last_B_VISOR_OK_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_VISOR_OK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_VISOR_OK_expected_prev);
		$display ("     Real value = %b", B_VISOR_OK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_VISOR_OK_exp = B_VISOR_OK_expected_prev;
	end
	if (
		( estado_expected_prev !== 1'bx ) && ( estado_prev !== estado_expected_prev )
		&& ((estado_expected_prev !== last_estado_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_estado_exp = estado_expected_prev;
	end
	if (
		( habilita_count_expected_prev !== 1'bx ) && ( habilita_count_prev !== habilita_count_expected_prev )
		&& ((habilita_count_expected_prev !== last_habilita_count_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port habilita_count :: @time = %t",  $realtime);
		$display ("     Expected value = %b", habilita_count_expected_prev);
		$display ("     Real value = %b", habilita_count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_habilita_count_exp = habilita_count_expected_prev;
	end
	if (
		( READ_MEM_expected_prev !== 1'bx ) && ( READ_MEM_prev !== READ_MEM_expected_prev )
		&& ((READ_MEM_expected_prev !== last_READ_MEM_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_MEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_MEM_expected_prev);
		$display ("     Real value = %b", READ_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_READ_MEM_exp = READ_MEM_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MAQUINA_B_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg confirmaDA;
reg confirmaFuncao;
reg habilita;
// wires                                               
wire B_LOAD_REG;
wire B_VISOR_MSG;
wire B_VISOR_OK;
wire estado;
wire habilita_count;
wire READ_MEM;

wire sampler;                             

// assign statements (if any)                          
MAQUINA_B i1 (
// port map - connection between master ports and signals/registers   
	.B_LOAD_REG(B_LOAD_REG),
	.B_VISOR_MSG(B_VISOR_MSG),
	.B_VISOR_OK(B_VISOR_OK),
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.estado(estado),
	.habilita(habilita),
	.habilita_count(habilita_count),
	.READ_MEM(READ_MEM)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// habilita
initial
begin
	habilita = 1'b1;
end 

// confirmaDA
initial
begin
	confirmaDA = 1'b0;
	confirmaDA = #20000 1'b1;
	confirmaDA = #50000 1'b0;
	confirmaDA = #40000 1'b1;
	confirmaDA = #60000 1'b0;
end 

// confirmaFuncao
initial
begin
	confirmaFuncao = 1'b0;
	confirmaFuncao = #260000 1'b1;
	confirmaFuncao = #100000 1'b0;
	confirmaFuncao = #40000 1'b1;
	confirmaFuncao = #120000 1'b0;
	confirmaFuncao = #50000 1'b1;
	confirmaFuncao = #110000 1'b0;
end 

MAQUINA_B_vlg_sample_tst tb_sample (
	.clk(clk),
	.confirmaDA(confirmaDA),
	.confirmaFuncao(confirmaFuncao),
	.habilita(habilita),
	.sampler_tx(sampler)
);

MAQUINA_B_vlg_check_tst tb_out(
	.B_LOAD_REG(B_LOAD_REG),
	.B_VISOR_MSG(B_VISOR_MSG),
	.B_VISOR_OK(B_VISOR_OK),
	.estado(estado),
	.habilita_count(habilita_count),
	.READ_MEM(READ_MEM),
	.sampler_rx(sampler)
);
endmodule

