// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2023 01:25:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MEM_16ADD_SWAP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MEM_16ADD_SWAP_vlg_sample_tst(
	address_down0,
	address_down1,
	address_down2,
	address_down3,
	address_up0,
	address_up1,
	address_up2,
	address_up3,
	clk,
	data_down,
	data_up,
	write_address_down,
	write_address_up,
	sampler_tx
);
input  address_down0;
input  address_down1;
input  address_down2;
input  address_down3;
input  address_up0;
input  address_up1;
input  address_up2;
input  address_up3;
input  clk;
input [7:0] data_down;
input [7:0] data_up;
input  write_address_down;
input  write_address_up;
output sampler_tx;

reg sample;
time current_time;
always @(address_down0 or address_down1 or address_down2 or address_down3 or address_up0 or address_up1 or address_up2 or address_up3 or clk or data_down or data_up or write_address_down or write_address_up)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MEM_16ADD_SWAP_vlg_check_tst (
	data_out_down,
	data_out_up,
	sampler_rx
);
input [7:0] data_out_down;
input [7:0] data_out_up;
input sampler_rx;

reg [7:0] data_out_down_expected;
reg [7:0] data_out_up_expected;

reg [7:0] data_out_down_prev;
reg [7:0] data_out_up_prev;

reg [7:0] data_out_down_expected_prev;
reg [7:0] data_out_up_expected_prev;

reg [7:0] last_data_out_down_exp;
reg [7:0] last_data_out_up_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_down_prev = data_out_down;
	data_out_up_prev = data_out_up;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_down_expected_prev = data_out_down_expected;
	data_out_up_expected_prev = data_out_up_expected;
end


// expected data_out_down[ 7 ]
initial
begin
	data_out_down_expected[7] = 1'bX;
end 
// expected data_out_down[ 6 ]
initial
begin
	data_out_down_expected[6] = 1'bX;
end 
// expected data_out_down[ 5 ]
initial
begin
	data_out_down_expected[5] = 1'bX;
end 
// expected data_out_down[ 4 ]
initial
begin
	data_out_down_expected[4] = 1'bX;
end 
// expected data_out_down[ 3 ]
initial
begin
	data_out_down_expected[3] = 1'bX;
end 
// expected data_out_down[ 2 ]
initial
begin
	data_out_down_expected[2] = 1'bX;
end 
// expected data_out_down[ 1 ]
initial
begin
	data_out_down_expected[1] = 1'bX;
end 
// expected data_out_down[ 0 ]
initial
begin
	data_out_down_expected[0] = 1'bX;
end 
// expected data_out_up[ 7 ]
initial
begin
	data_out_up_expected[7] = 1'bX;
end 
// expected data_out_up[ 6 ]
initial
begin
	data_out_up_expected[6] = 1'bX;
end 
// expected data_out_up[ 5 ]
initial
begin
	data_out_up_expected[5] = 1'bX;
end 
// expected data_out_up[ 4 ]
initial
begin
	data_out_up_expected[4] = 1'bX;
end 
// expected data_out_up[ 3 ]
initial
begin
	data_out_up_expected[3] = 1'bX;
end 
// expected data_out_up[ 2 ]
initial
begin
	data_out_up_expected[2] = 1'bX;
end 
// expected data_out_up[ 1 ]
initial
begin
	data_out_up_expected[1] = 1'bX;
end 
// expected data_out_up[ 0 ]
initial
begin
	data_out_up_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_down_expected or data_out_down or data_out_up_expected or data_out_up)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out_down = %b | expected data_out_up = %b | ",data_out_down_expected_prev,data_out_up_expected_prev);
	$display("| real data_out_down = %b | real data_out_up = %b | ",data_out_down_prev,data_out_up_prev);
`endif
	if (
		( data_out_down_expected_prev[0] !== 1'bx ) && ( data_out_down_prev[0] !== data_out_down_expected_prev[0] )
		&& ((data_out_down_expected_prev[0] !== last_data_out_down_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[0] = data_out_down_expected_prev[0];
	end
	if (
		( data_out_down_expected_prev[1] !== 1'bx ) && ( data_out_down_prev[1] !== data_out_down_expected_prev[1] )
		&& ((data_out_down_expected_prev[1] !== last_data_out_down_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[1] = data_out_down_expected_prev[1];
	end
	if (
		( data_out_down_expected_prev[2] !== 1'bx ) && ( data_out_down_prev[2] !== data_out_down_expected_prev[2] )
		&& ((data_out_down_expected_prev[2] !== last_data_out_down_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[2] = data_out_down_expected_prev[2];
	end
	if (
		( data_out_down_expected_prev[3] !== 1'bx ) && ( data_out_down_prev[3] !== data_out_down_expected_prev[3] )
		&& ((data_out_down_expected_prev[3] !== last_data_out_down_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[3] = data_out_down_expected_prev[3];
	end
	if (
		( data_out_down_expected_prev[4] !== 1'bx ) && ( data_out_down_prev[4] !== data_out_down_expected_prev[4] )
		&& ((data_out_down_expected_prev[4] !== last_data_out_down_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[4] = data_out_down_expected_prev[4];
	end
	if (
		( data_out_down_expected_prev[5] !== 1'bx ) && ( data_out_down_prev[5] !== data_out_down_expected_prev[5] )
		&& ((data_out_down_expected_prev[5] !== last_data_out_down_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[5] = data_out_down_expected_prev[5];
	end
	if (
		( data_out_down_expected_prev[6] !== 1'bx ) && ( data_out_down_prev[6] !== data_out_down_expected_prev[6] )
		&& ((data_out_down_expected_prev[6] !== last_data_out_down_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[6] = data_out_down_expected_prev[6];
	end
	if (
		( data_out_down_expected_prev[7] !== 1'bx ) && ( data_out_down_prev[7] !== data_out_down_expected_prev[7] )
		&& ((data_out_down_expected_prev[7] !== last_data_out_down_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_down[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_down_expected_prev);
		$display ("     Real value = %b", data_out_down_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_down_exp[7] = data_out_down_expected_prev[7];
	end
	if (
		( data_out_up_expected_prev[0] !== 1'bx ) && ( data_out_up_prev[0] !== data_out_up_expected_prev[0] )
		&& ((data_out_up_expected_prev[0] !== last_data_out_up_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[0] = data_out_up_expected_prev[0];
	end
	if (
		( data_out_up_expected_prev[1] !== 1'bx ) && ( data_out_up_prev[1] !== data_out_up_expected_prev[1] )
		&& ((data_out_up_expected_prev[1] !== last_data_out_up_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[1] = data_out_up_expected_prev[1];
	end
	if (
		( data_out_up_expected_prev[2] !== 1'bx ) && ( data_out_up_prev[2] !== data_out_up_expected_prev[2] )
		&& ((data_out_up_expected_prev[2] !== last_data_out_up_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[2] = data_out_up_expected_prev[2];
	end
	if (
		( data_out_up_expected_prev[3] !== 1'bx ) && ( data_out_up_prev[3] !== data_out_up_expected_prev[3] )
		&& ((data_out_up_expected_prev[3] !== last_data_out_up_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[3] = data_out_up_expected_prev[3];
	end
	if (
		( data_out_up_expected_prev[4] !== 1'bx ) && ( data_out_up_prev[4] !== data_out_up_expected_prev[4] )
		&& ((data_out_up_expected_prev[4] !== last_data_out_up_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[4] = data_out_up_expected_prev[4];
	end
	if (
		( data_out_up_expected_prev[5] !== 1'bx ) && ( data_out_up_prev[5] !== data_out_up_expected_prev[5] )
		&& ((data_out_up_expected_prev[5] !== last_data_out_up_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[5] = data_out_up_expected_prev[5];
	end
	if (
		( data_out_up_expected_prev[6] !== 1'bx ) && ( data_out_up_prev[6] !== data_out_up_expected_prev[6] )
		&& ((data_out_up_expected_prev[6] !== last_data_out_up_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[6] = data_out_up_expected_prev[6];
	end
	if (
		( data_out_up_expected_prev[7] !== 1'bx ) && ( data_out_up_prev[7] !== data_out_up_expected_prev[7] )
		&& ((data_out_up_expected_prev[7] !== last_data_out_up_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out_up[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_up_expected_prev);
		$display ("     Real value = %b", data_out_up_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_out_up_exp[7] = data_out_up_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MEM_16ADD_SWAP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg address_down0;
reg address_down1;
reg address_down2;
reg address_down3;
reg address_up0;
reg address_up1;
reg address_up2;
reg address_up3;
reg clk;
reg [7:0] data_down;
reg [7:0] data_up;
reg write_address_down;
reg write_address_up;
// wires                                               
wire [7:0] data_out_down;
wire [7:0] data_out_up;

wire sampler;                             

// assign statements (if any)                          
MEM_16ADD_SWAP i1 (
// port map - connection between master ports and signals/registers   
	.address_down0(address_down0),
	.address_down1(address_down1),
	.address_down2(address_down2),
	.address_down3(address_down3),
	.address_up0(address_up0),
	.address_up1(address_up1),
	.address_up2(address_up2),
	.address_up3(address_up3),
	.clk(clk),
	.data_down(data_down),
	.data_out_down(data_out_down),
	.data_out_up(data_out_up),
	.data_up(data_up),
	.write_address_down(write_address_down),
	.write_address_up(write_address_up)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// address_down3
initial
begin
	address_down3 = 1'b0;
end 

// address_down2
initial
begin
	address_down2 = 1'b1;
	address_down2 = #160000 1'b0;
	address_down2 = #110000 1'b1;
end 

// address_down1
initial
begin
	address_down1 = 1'b0;
end 

// address_down0
initial
begin
	address_down0 = 1'b1;
	address_down0 = #160000 1'b0;
	address_down0 = #110000 1'b1;
end 
// data_down[ 7 ]
initial
begin
	data_down[7] = 1'b1;
end 
// data_down[ 6 ]
initial
begin
	data_down[6] = 1'b1;
	data_down[6] = #270000 1'b0;
	data_down[6] = #400000 1'b1;
end 
// data_down[ 5 ]
initial
begin
	data_down[5] = 1'b1;
end 
// data_down[ 4 ]
initial
begin
	data_down[4] = 1'b1;
	data_down[4] = #270000 1'b0;
	data_down[4] = #400000 1'b1;
end 
// data_down[ 3 ]
initial
begin
	data_down[3] = 1'b1;
end 
// data_down[ 2 ]
initial
begin
	data_down[2] = 1'b1;
	data_down[2] = #270000 1'b0;
	data_down[2] = #400000 1'b1;
end 
// data_down[ 1 ]
initial
begin
	data_down[1] = 1'b1;
end 
// data_down[ 0 ]
initial
begin
	data_down[0] = 1'b1;
	data_down[0] = #270000 1'b0;
	data_down[0] = #400000 1'b1;
end 

// write_address_down
initial
begin
	write_address_down = 1'b0;
	write_address_down = #110000 1'b1;
	write_address_down = #30000 1'b0;
	write_address_down = #60000 1'b1;
	write_address_down = #30000 1'b0;
	write_address_down = #140000 1'b1;
	write_address_down = #30000 1'b0;
	write_address_down = #360000 1'b1;
	write_address_down = #20000 1'b0;
end 

// address_up3
initial
begin
	address_up3 = 1'b0;
end 

// address_up2
initial
begin
	address_up2 = 1'b0;
	address_up2 = #170000 1'b1;
	address_up2 = #100000 1'b0;
end 

// address_up1
initial
begin
	address_up1 = 1'b0;
end 

// address_up0
initial
begin
	address_up0 = 1'b0;
	address_up0 = #170000 1'b1;
	address_up0 = #100000 1'b0;
end 
// data_up[ 7 ]
initial
begin
	data_up[7] = 1'b1;
end 
// data_up[ 6 ]
initial
begin
	data_up[6] = 1'b0;
	data_up[6] = #270000 1'b1;
	data_up[6] = #400000 1'b0;
end 
// data_up[ 5 ]
initial
begin
	data_up[5] = 1'b1;
end 
// data_up[ 4 ]
initial
begin
	data_up[4] = 1'b0;
	data_up[4] = #270000 1'b1;
	data_up[4] = #400000 1'b0;
end 
// data_up[ 3 ]
initial
begin
	data_up[3] = 1'b1;
end 
// data_up[ 2 ]
initial
begin
	data_up[2] = 1'b0;
	data_up[2] = #270000 1'b1;
	data_up[2] = #400000 1'b0;
end 
// data_up[ 1 ]
initial
begin
	data_up[1] = 1'b1;
end 
// data_up[ 0 ]
initial
begin
	data_up[0] = 1'b0;
	data_up[0] = #270000 1'b1;
	data_up[0] = #400000 1'b0;
end 

// write_address_up
initial
begin
	write_address_up = 1'b0;
	write_address_up = #110000 1'b1;
	write_address_up = #30000 1'b0;
	write_address_up = #60000 1'b1;
	write_address_up = #30000 1'b0;
	write_address_up = #140000 1'b1;
	write_address_up = #40000 1'b0;
	write_address_up = #350000 1'b1;
	write_address_up = #20000 1'b0;
end 

MEM_16ADD_SWAP_vlg_sample_tst tb_sample (
	.address_down0(address_down0),
	.address_down1(address_down1),
	.address_down2(address_down2),
	.address_down3(address_down3),
	.address_up0(address_up0),
	.address_up1(address_up1),
	.address_up2(address_up2),
	.address_up3(address_up3),
	.clk(clk),
	.data_down(data_down),
	.data_up(data_up),
	.write_address_down(write_address_down),
	.write_address_up(write_address_up),
	.sampler_tx(sampler)
);

MEM_16ADD_SWAP_vlg_check_tst tb_out(
	.data_out_down(data_out_down),
	.data_out_up(data_out_up),
	.sampler_rx(sampler)
);
endmodule

